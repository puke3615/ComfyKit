{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ComfyKit","text":"<p>ComfyUI - UI + Kit = ComfyKit</p> <p>Python SDK for ComfyUI - Support Local or Cloud - Generate images, videos, audio in 3 lines</p> <p> \ud83d\udcd6 Documentation |      \ud83d\ude80 Quick Start |      \ud83c\udfaf DSL Reference |      \ud83d\udca1 Examples |      \u2753 Issues </p>"},{"location":"#what-is-comfykit","title":"\u2728 What is ComfyKit?","text":"<p>ComfyKit is a pure Python SDK that provides a clean API for executing ComfyUI workflows and returns structured Python objects.</p>"},{"location":"#execute-a-workflow-in-3-lines-of-code","title":"Execute a workflow in 3 lines of code","text":"<pre><code>from comfykit import ComfyKit\n\n# Connect to local ComfyUI server\nkit = ComfyKit(comfyui_url=\"http://127.0.0.1:8188\")\nresult = await kit.execute(\"workflow.json\", {\"prompt\": \"a cute cat\"})\n\nprint(result.images)  # ['http://127.0.0.1:8188/view?filename=cat_001.png']\n\n# \ud83c\udf10 Or use RunningHub cloud (no local GPU needed)\n# kit = ComfyKit(runninghub_api_key=\"rh-xxx\")\n</code></pre>"},{"location":"#get-structured-data-back","title":"Get structured data back","text":"<pre><code># ExecuteResult object, not strings!\nresult.status          # \"completed\"\nresult.images          # All generated image URLs\nresult.images_by_var   # Images grouped by variable name\nresult.videos          # Video URLs (if any)\nresult.audios          # Audio URLs (if any)\nresult.duration        # Execution time\n</code></pre>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>\u26a1 Zero Configuration: Works out of the box, connects to local ComfyUI by default (<code>http://127.0.0.1:8188</code>)</li> <li>\u2601\ufe0f Cloud Execution: Seamless RunningHub cloud support - No GPU or local ComfyUI needed</li> <li>\ud83c\udfa8 Simple API: 3 lines of code to execute workflows, no need to understand internals</li> <li>\ud83d\udcca Structured Output: Returns <code>ExecuteResult</code> objects, not strings</li> <li>\ud83d\udd04 Smart Detection: Auto-detects local files, URLs, and RunningHub workflow IDs</li> <li>\ud83d\udd0c Lightweight: Less than 10 core dependencies</li> <li>\ud83c\udfad Multimodal Support: Images, videos, audio - all in one place</li> </ul>"},{"location":"#comfykit-vs-comfyui-native-api","title":"\ud83d\udd0d ComfyKit vs ComfyUI Native API","text":"Aspect ComfyUI Native API ComfyKit Complexity Manual WebSocket/HTTP handling 3 lines of code Return Value Raw JSON, need to parse yourself Structured <code>ExecuteResult</code> object Media Handling Need to construct URLs manually Automatically generates complete media URLs Error Handling Need to implement yourself Built-in comprehensive error handling Best For Familiar with ComfyUI internals Just want quick integration"},{"location":"#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<ul> <li>ComfyUI - Powerful AI image generation framework</li> <li>RunningHub - ComfyUI cloud platform</li> </ul>"},{"location":"#contact","title":"\ud83d\udcde Contact","text":"<ul> <li>Author: Fan Wu</li> <li>Email: 1129090915@qq.com</li> <li>GitHub: @puke3615</li> </ul> <p>If ComfyKit helps you, please give it a \u2b50 Star!</p> <p> GitHub \u00b7      PyPI \u00b7      Issues </p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Complete API reference for ComfyKit.</p>"},{"location":"api-reference/#comfykit-class","title":"ComfyKit Class","text":""},{"location":"api-reference/#constructor","title":"Constructor","text":"<pre><code>class ComfyKit:\n    def __init__(\n        self,\n        # Local ComfyUI configuration\n        comfyui_url: Optional[str] = None,\n        executor_type: Literal[\"http\", \"websocket\"] = \"http\",\n        api_key: Optional[str] = None,\n        cookies: Optional[str] = None,\n\n        # RunningHub cloud configuration\n        runninghub_url: Optional[str] = None,\n        runninghub_api_key: Optional[str] = None,\n        runninghub_timeout: int = 300,\n        runninghub_retry_count: int = 3,\n    )\n</code></pre>"},{"location":"api-reference/#execute-method","title":"execute Method","text":"<pre><code>async def execute(\n    self,\n    workflow: Union[str, Path],\n    params: Optional[Dict[str, Any]] = None,\n) -&gt; ExecuteResult\n</code></pre> <p>Parameters: - <code>workflow</code>: Workflow source (file path, URL, or RunningHub ID) - <code>params</code>: Workflow parameters</p> <p>Returns: - <code>ExecuteResult</code>: Structured execution result</p>"},{"location":"api-reference/#execute_json-method","title":"execute_json Method","text":"<pre><code>async def execute_json(\n    self,\n    workflow_json: Dict[str, Any],\n    params: Optional[Dict[str, Any]] = None,\n) -&gt; ExecuteResult\n</code></pre> <p>Parameters: - <code>workflow_json</code>: Workflow JSON dictionary - <code>params</code>: Workflow parameters</p> <p>Returns: - <code>ExecuteResult</code>: Structured execution result</p>"},{"location":"api-reference/#executeresult-class","title":"ExecuteResult Class","text":"<pre><code>class ExecuteResult:\n    status: str                           # \"completed\" or \"failed\"\n    prompt_id: Optional[str]              # Prompt ID\n    duration: Optional[float]             # Duration in seconds\n\n    # Media outputs\n    images: List[str]                     # All image URLs\n    videos: List[str]                     # All video URLs\n    audios: List[str]                     # All audio URLs\n    texts: List[str]                      # All text outputs\n\n    # Grouped by variable name\n    images_by_var: Dict[str, List[str]]   # Images by variable\n    videos_by_var: Dict[str, List[str]]   # Videos by variable\n    audios_by_var: Dict[str, List[str]]   # Audios by variable\n    texts_by_var: Dict[str, List[str]]    # Texts by variable\n\n    # Raw outputs\n    outputs: Optional[Dict[str, Any]]     # Raw output data\n    msg: Optional[str]                    # Error message (if failed)\n</code></pre>"},{"location":"api-reference/#usage-example","title":"Usage Example","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # Initialize\n    kit = ComfyKit()\n\n    # Execute workflow\n    result = await kit.execute(\"workflow.json\", {\n        \"prompt\": \"a cute cat\"\n    })\n\n    # Access results\n    print(f\"Status: {result.status}\")\n    print(f\"Images: {result.images}\")\n    print(f\"Duration: {result.duration}s\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"api-reference/#next-steps","title":"Next Steps","text":"<ul> <li>Check out complete Examples</li> <li>Learn about Configuration</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>ComfyKit configuration guide.</p>"},{"location":"configuration/#configuration-priority","title":"Configuration Priority","text":"<p>ComfyKit uses the following priority for configuration:</p> <ol> <li>Constructor parameters (highest priority)</li> <li>Environment variables</li> <li>Default values</li> </ol>"},{"location":"configuration/#local-comfyui-configuration","title":"Local ComfyUI Configuration","text":"<pre><code>kit = ComfyKit(\n    # ComfyUI server URL\n    comfyui_url=\"http://127.0.0.1:8188\",  # Default\n\n    # Execution mode: http (recommended) or websocket\n    executor_type=\"http\",  # Default\n\n    # API Key (if ComfyUI requires authentication)\n    api_key=\"your-api-key\",\n\n    # Cookies (if needed)\n    cookies=\"session=abc123\"\n)\n</code></pre>"},{"location":"configuration/#runninghub-cloud-configuration","title":"RunningHub Cloud Configuration","text":"<pre><code>kit = ComfyKit(\n    # RunningHub API URL\n    runninghub_url=\"https://www.runninghub.ai\",  # Default\n\n    # RunningHub API Key (required)\n    runninghub_api_key=\"rh-key-xxx\",\n\n    # Timeout (seconds)\n    runninghub_timeout=300,  # Default: 5 minutes\n\n    # Retry count\n    runninghub_retry_count=3  # Default: 3 retries\n)\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<pre><code># ComfyUI configuration\nexport COMFYUI_BASE_URL=\"http://127.0.0.1:8188\"\nexport COMFYUI_EXECUTOR_TYPE=\"http\"\nexport COMFYUI_API_KEY=\"your-api-key\"\nexport COMFYUI_COOKIES=\"session=abc123\"\n\n# RunningHub configuration\nexport RUNNINGHUB_BASE_URL=\"https://www.runninghub.ai\"\nexport RUNNINGHUB_API_KEY=\"rh-key-xxx\"\nexport RUNNINGHUB_TIMEOUT=\"300\"\nexport RUNNINGHUB_RETRY_COUNT=\"3\"\n</code></pre>"},{"location":"configuration/#complete-example","title":"Complete Example","text":"<pre><code>from comfykit import ComfyKit\n\n# All parameters\nkit = ComfyKit(\n    # Local ComfyUI\n    comfyui_url=\"http://127.0.0.1:8188\",\n    executor_type=\"http\",\n    api_key=\"your-api-key\",\n    cookies=\"session=abc123\",\n\n    # RunningHub\n    runninghub_url=\"https://www.runninghub.ai\",\n    runninghub_api_key=\"rh-key-xxx\",\n    runninghub_timeout=300,\n    runninghub_retry_count=3,\n)\n</code></pre>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Usage</li> <li>Check API Reference</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome! Please check Issues for areas that need help.</p>"},{"location":"contributing/#contribution-process","title":"Contribution Process","text":"<ol> <li>Fork this repository</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/puke3615/ComfyKit.git\ncd ComfyKit\n\n# Install dependencies\nuv sync --extra dev\n\n# Run tests\npytest\n\n# Format code\nruff format\nruff check --fix\n</code></pre>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<ul> <li>Write tests for new features</li> <li>Follow existing code style</li> <li>Update documentation</li> <li>Add examples if needed</li> </ul>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>Feel free to open an issue for discussion!</p>"},{"location":"development/","title":"Development","text":"<p>Guide for ComfyKit development.</p>"},{"location":"development/#install-development-dependencies","title":"Install Development Dependencies","text":"<pre><code>uv sync --extra dev\n</code></pre>"},{"location":"development/#run-tests","title":"Run Tests","text":"<pre><code>pytest\n</code></pre>"},{"location":"development/#code-formatting","title":"Code Formatting","text":"<pre><code>ruff check --fix\nruff format\n</code></pre>"},{"location":"development/#project-structure","title":"Project Structure","text":"<pre><code>ComfyKit/\n\u251c\u2500\u2500 comfykit/           # Main package\n\u2502   \u251c\u2500\u2500 comfyui/        # ComfyUI integration\n\u2502   \u2514\u2500\u2500 utils/          # Utilities\n\u251c\u2500\u2500 examples/           # Example scripts\n\u251c\u2500\u2500 workflows/          # Example workflows\n\u2514\u2500\u2500 tests/              # Test suite\n</code></pre>"},{"location":"development/#next-steps","title":"Next Steps","text":"<ul> <li>Check Contributing guide</li> <li>Read API Reference</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>Complete example code in the <code>examples/</code> directory:</p> <ul> <li><code>01_quick_start.py</code> - Quick start guide</li> <li><code>02_configuration.py</code> - Configuration options</li> <li><code>03_local_workflows.py</code> - Local workflow execution</li> <li><code>04_runninghub_cloud.py</code> - RunningHub cloud execution</li> <li><code>05_advanced_features.py</code> - Advanced features</li> </ul>"},{"location":"examples/#run-examples","title":"Run Examples","text":"<pre><code>cd examples\npython run_all.py\n</code></pre>"},{"location":"examples/#quick-example","title":"Quick Example","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    kit = ComfyKit()\n    result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n    print(result.images)\n\nasyncio.run(main())\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>pip or uv package manager</li> </ul>"},{"location":"installation/#install-via-pip","title":"Install via pip","text":"<pre><code>pip install comfykit\n</code></pre>"},{"location":"installation/#install-via-uv-recommended","title":"Install via uv (recommended)","text":"<pre><code>uv add comfykit\n</code></pre>"},{"location":"installation/#verify-installation","title":"Verify Installation","text":"<pre><code>from comfykit import ComfyKit\n\nprint(\"ComfyKit installed successfully!\")\n</code></pre>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"installation/#development-dependencies","title":"Development Dependencies","text":"<p>If you want to contribute to ComfyKit, install development dependencies:</p> <pre><code>pip install comfykit[dev]\n</code></pre> <p>Or with uv:</p> <pre><code>uv sync --extra dev\n</code></pre> <p>This includes: - pytest - Testing framework - pytest-asyncio - Async test support - black - Code formatter - ruff - Linter</p>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, check out the Quick Start guide to begin using ComfyKit.</p>"},{"location":"license/","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"license/#mit-license","title":"MIT License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Fan Wu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>See the LICENSE file for details.</p>"},{"location":"quick-start/","title":"Quick Start","text":"<p>This guide will help you get started with ComfyKit in minutes.</p>"},{"location":"quick-start/#option-1-runninghub-cloud-no-gpu-needed","title":"Option 1: RunningHub Cloud (No GPU needed) \u2b50","text":"<p>If you don't have a local GPU or ComfyUI environment, use RunningHub cloud:</p> <pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # Initialize with RunningHub (only API key needed)\n    kit = ComfyKit(\n        runninghub_api_key=\"your-runninghub-key\"\n    )\n\n    # Execute with workflow ID\n    result = await kit.execute(\"12345\", {\n        \"prompt\": \"a beautiful sunset over the ocean\"\n    })\n\n    print(f\"\ud83d\uddbc\ufe0f  Generated images: {result.images}\")\n\nasyncio.run(main())\n</code></pre> <p>Get Your API Key</p> <p>Get your free API key at RunningHub</p>"},{"location":"quick-start/#option-2-local-comfyui","title":"Option 2: Local ComfyUI","text":"<p>If you have ComfyUI running locally:</p>"},{"location":"quick-start/#1-start-comfyui","title":"1. Start ComfyUI","text":"<pre><code># Start ComfyUI (default port 8188)\npython main.py\n</code></pre>"},{"location":"quick-start/#2-execute-workflow","title":"2. Execute workflow","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # Connect to local ComfyUI (default: http://127.0.0.1:8188)\n    kit = ComfyKit(comfyui_url=\"http://127.0.0.1:8188\")\n\n    # Execute workflow\n    result = await kit.execute(\n        \"workflow.json\",\n        params={\"prompt\": \"a cute cat playing with yarn\"}\n    )\n\n    # Check results\n    if result.status == \"completed\":\n        print(f\"\u2705 Success! Duration: {result.duration:.2f}s\")\n        print(f\"\ud83d\uddbc\ufe0f  Images: {result.images}\")\n    else:\n        print(f\"\u274c Failed: {result.msg}\")\n\nasyncio.run(main())\n</code></pre> <p>\ud83d\udca1 Tip: <code>comfyui_url</code> defaults to <code>http://127.0.0.1:8188</code> and can be omitted</p>"},{"location":"quick-start/#understanding-the-results","title":"Understanding the Results","text":"<p>When you execute a workflow, ComfyKit returns an <code>ExecuteResult</code> object:</p> <pre><code>result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n\n# Basic information\nprint(result.status)          # \"completed\" or \"failed\"\nprint(result.duration)        # Execution time in seconds\nprint(result.prompt_id)       # Unique execution ID\n\n# Generated media\nprint(result.images)          # List of image URLs\nprint(result.videos)          # List of video URLs\nprint(result.audios)          # List of audio URLs\n\n# Grouped by variable name\nprint(result.images_by_var)   # Dict of images grouped by output variable\n</code></pre>"},{"location":"quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Configuration options</li> <li>Explore Usage Examples</li> <li>Understand Workflow DSL for parameterizing workflows</li> <li>Check out complete Examples</li> </ul>"},{"location":"dsl/best-practices/","title":"DSL Best Practices","text":"<p>Guidelines for using ComfyKit's Workflow DSL effectively.</p>"},{"location":"dsl/best-practices/#parameter-naming","title":"Parameter Naming","text":"<p>\u2705 Good: Use descriptive names <pre><code>\"_meta\": {\"title\": \"$positive_prompt.text!\"}\n</code></pre></p> <p>\u274c Bad: Use single letters <pre><code>\"_meta\": {\"title\": \"$p.text!\"}\n</code></pre></p>"},{"location":"dsl/best-practices/#required-markers","title":"Required Markers","text":"<p>Use <code>!</code> for parameters with no reasonable default:</p> <p>\u2705 Good: Prompt is required <pre><code>\"_meta\": {\"title\": \"$prompt.text!\"}\n</code></pre></p> <p>\u274c Bad: Seed probably has a good default <pre><code>\"_meta\": {\"title\": \"$seed!\"}\n</code></pre></p>"},{"location":"dsl/best-practices/#upload-markers","title":"Upload Markers","text":"<p>Always use <code>~</code> for image/video/audio parameters:</p> <p>\u2705 Good: <pre><code>\"_meta\": {\"title\": \"$~input_image\"}\n</code></pre></p>"},{"location":"dsl/best-practices/#output-variables","title":"Output Variables","text":"<p>Use <code>$output.xxx</code> for important outputs:</p> <p>\u2705 Good: Named outputs are easy to reference <pre><code>\"_meta\": {\"title\": \"$output.final_image\"}\n</code></pre></p>"},{"location":"dsl/best-practices/#display-text","title":"Display Text","text":"<p>Add descriptive text for clarity:</p> <p>\u2705 Good: <pre><code>\"_meta\": {\"title\": \"Canvas Size, $width!, $height!\"}\n</code></pre></p> <p>\u274c Bad: <pre><code>\"_meta\": {\"title\": \"$width!, $height!\"}\n</code></pre></p>"},{"location":"dsl/best-practices/#complete-example","title":"Complete Example","text":"<pre><code>{\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"Canvas, $width!, $height!\"\n    }\n  },\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$positive_prompt.text!\"\n    }\n  },\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$~init_image\"\n    }\n  },\n  \"9\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.final\"\n    }\n  }\n}\n</code></pre>"},{"location":"dsl/outputs/","title":"DSL Outputs","text":"<p>Mark workflow outputs with the <code>$output.name</code> marker to easily reference generated media.</p>"},{"location":"dsl/outputs/#basic-output-marking","title":"Basic Output Marking","text":"<pre><code>{\n  \"9\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.cover\"\n    },\n    \"inputs\": {\n      \"filename_prefix\": \"book_cover\",\n      \"images\": [\"8\", 0]\n    }\n  }\n}\n</code></pre> <p>Access by name: <pre><code>result = await kit.execute(\"workflow.json\", params)\ncover_image = result.images_by_var[\"cover\"][0]\n</code></pre></p>"},{"location":"dsl/outputs/#multiple-outputs","title":"Multiple Outputs","text":"<pre><code>{\n  \"9\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.cover\"\n    }\n  },\n  \"15\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.thumbnail\"\n    }\n  }\n}\n</code></pre> <p>Access each: <pre><code>cover = result.images_by_var[\"cover\"][0]\nthumbnail = result.images_by_var[\"thumbnail\"][0]\n</code></pre></p>"},{"location":"dsl/outputs/#auto-detection","title":"Auto-detection","text":"<p>Without <code>$output</code> markers, ComfyKit auto-detects outputs by node ID:</p> <pre><code># Access by node ID\nimages_from_node_9 = result.images_by_var[\"9\"]\n</code></pre>"},{"location":"dsl/outputs/#next-steps","title":"Next Steps","text":"<ul> <li>Read Best Practices</li> </ul>"},{"location":"dsl/overview/","title":"Workflow DSL Overview","text":"<p>ComfyKit provides a concise DSL (Domain Specific Language) for marking workflow nodes, allowing you to:</p> <ul> <li>Define dynamic parameters</li> <li>Mark output variables</li> <li>Specify required/optional parameters</li> <li>Automatically handle media file uploads</li> </ul>"},{"location":"dsl/overview/#dsl-syntax-quick-reference","title":"DSL Syntax Quick Reference","text":"<p>These DSL markers are written in the title field of ComfyUI workflow nodes to convert fixed workflows into parameterizable templates.</p> <p>Usage Steps: 1. In ComfyUI editor, double-click a node and modify its title to add DSL markers (e.g., <code>$prompt.text!</code>) 2. Save as API format JSON (select \"Save (API Format)\" from menu, not regular \"Save\") 3. Execute with parameters via <code>kit.execute(\"workflow.json\", {\"prompt\": \"value\"})</code></p> <p>\u26a0\ufe0f Important: ComfyKit requires API format workflow JSON, not UI format.</p> Syntax Description Example Effect <code>$param</code> Basic parameter (shorthand) <code>$prompt</code> Parameter <code>prompt</code>, maps to field <code>prompt</code> <code>$param.field</code> Specify field mapping <code>$prompt.text</code> Parameter <code>prompt</code>, maps to field <code>text</code> <code>$param!</code> Required parameter <code>$prompt!</code> Parameter <code>prompt</code> is required, no default <code>$~param</code> Media parameter (upload) <code>$~image</code> Parameter <code>image</code> requires file upload <code>$~param!</code> Required media parameter <code>$~image!</code> Parameter <code>image</code> is required and needs upload <code>$param.~field!</code> Combined markers <code>$img.~image!</code> Parameter <code>img</code> maps to <code>image</code>, required and upload <code>$output.name</code> Output variable marker <code>$output.cover</code> Mark output variable name as <code>cover</code> <code>Text, $p1, $p2</code> Multiple parameters <code>Size, $width!, $height!</code> Define multiple parameters in one node"},{"location":"dsl/overview/#how-it-works","title":"How It Works","text":"<p>The DSL works by adding markers to the <code>_meta.title</code> field of workflow nodes:</p> <pre><code>{\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$prompt.text!\"\n    },\n    \"inputs\": {\n      \"text\": \"a beautiful landscape\",\n      \"clip\": [\"4\", 1]\n    }\n  }\n}\n</code></pre> <p>When you execute this workflow:</p> <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a cute cat\"\n})\n</code></pre> <p>ComfyKit automatically: 1. Parses the DSL markers 2. Replaces the <code>text</code> field with \"a cute cat\" 3. Executes the modified workflow</p>"},{"location":"dsl/overview/#marker-types","title":"Marker Types","text":""},{"location":"dsl/overview/#parameter-markers","title":"Parameter Markers","text":"<ul> <li><code>$param</code> - Basic parameter</li> <li><code>$param.field</code> - Parameter with field mapping</li> <li><code>$param!</code> - Required parameter</li> <li><code>$~param</code> - Media upload parameter</li> </ul> <p>See Parameters for detailed examples.</p>"},{"location":"dsl/overview/#output-markers","title":"Output Markers","text":"<ul> <li><code>$output.name</code> - Mark output variables</li> </ul> <p>See Outputs for detailed examples.</p>"},{"location":"dsl/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Parameters in detail</li> <li>Understand Outputs marking</li> <li>Read Best Practices</li> </ul>"},{"location":"dsl/parameters/","title":"DSL Parameters","text":"<p>Detailed guide on parameter markers in ComfyKit's Workflow DSL.</p>"},{"location":"dsl/parameters/#basic-parameter","title":"Basic Parameter","text":"<p>The simplest form - parameter name matches the field name:</p> <pre><code>{\n  \"3\": {\n    \"class_type\": \"KSampler\",\n    \"_meta\": {\n      \"title\": \"$seed\"\n    },\n    \"inputs\": {\n      \"seed\": 0\n    }\n  }\n}\n</code></pre> <p>Usage: <pre><code>result = await kit.execute(\"workflow.json\", {\"seed\": 42})\n</code></pre></p>"},{"location":"dsl/parameters/#field-mapping","title":"Field Mapping","text":"<p>Map a parameter to a different field name:</p> <pre><code>{\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$prompt.text\"\n    },\n    \"inputs\": {\n      \"text\": \"default prompt\"\n    }\n  }\n}\n</code></pre> <p>Usage: <pre><code>result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n# \"prompt\" parameter maps to \"text\" field\n</code></pre></p>"},{"location":"dsl/parameters/#required-parameters","title":"Required Parameters","text":"<p>Mark parameters as required with <code>!</code>:</p> <pre><code>{\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"$width!, $height!\"\n    },\n    \"inputs\": {\n      \"width\": 512,\n      \"height\": 512\n    }\n  }\n}\n</code></pre> <p>Usage: <pre><code># Must provide both width and height\nresult = await kit.execute(\"workflow.json\", {\n    \"width\": 1024,\n    \"height\": 768\n})\n</code></pre></p>"},{"location":"dsl/parameters/#media-upload-parameters","title":"Media Upload Parameters","text":"<p>Mark parameters that need file upload with <code>~</code>:</p> <pre><code>{\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$~input_image\"\n    },\n    \"inputs\": {\n      \"image\": \"default.png\"\n    }\n  }\n}\n</code></pre> <p>Usage: <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"input_image\": \"/path/to/image.jpg\"  # Auto-uploads\n})\n</code></pre></p>"},{"location":"dsl/parameters/#combined-markers","title":"Combined Markers","text":"<p>Combine field mapping, upload, and required markers:</p> <pre><code>{\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$img.~image!\"\n    },\n    \"inputs\": {\n      \"image\": \"default.png\"\n    }\n  }\n}\n</code></pre> <p>This means: - Parameter name: <code>img</code> - Maps to field: <code>image</code> - Requires upload: <code>~</code> - Is required: <code>!</code></p>"},{"location":"dsl/parameters/#multiple-parameters","title":"Multiple Parameters","text":"<p>Define multiple parameters in one node:</p> <pre><code>{\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"Canvas Size, $width!, $height!, $batch_size\"\n    },\n    \"inputs\": {\n      \"width\": 512,\n      \"height\": 512,\n      \"batch_size\": 1\n    }\n  }\n}\n</code></pre> <p>Text without <code>$</code> is ignored (display text only).</p>"},{"location":"dsl/parameters/#optional-vs-required","title":"Optional vs Required","text":""},{"location":"dsl/parameters/#optional-with-default","title":"Optional (with default)","text":"<pre><code>\"_meta\": {\n  \"title\": \"$seed\"\n}\n</code></pre> <ul> <li>If not provided, uses default from workflow</li> <li>No error if omitted</li> </ul>"},{"location":"dsl/parameters/#required-no-default","title":"Required (no default)","text":"<pre><code>\"_meta\": {\n  \"title\": \"$seed!\"\n}\n</code></pre> <ul> <li>Must be provided</li> <li>Errors if omitted</li> </ul>"},{"location":"dsl/parameters/#complete-example","title":"Complete Example","text":"<pre><code>{\n  \"4\": {\n    \"class_type\": \"CheckpointLoaderSimple\",\n    \"_meta\": {\n      \"title\": \"$model.ckpt_name\"\n    },\n    \"inputs\": {\n      \"ckpt_name\": \"sd_xl_base_1.0.safetensors\"\n    }\n  },\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"Size, $width!, $height!\"\n    },\n    \"inputs\": {\n      \"width\": 1024,\n      \"height\": 1024\n    }\n  },\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$prompt.text!\"\n    },\n    \"inputs\": {\n      \"text\": \"a beautiful landscape\"\n    }\n  },\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$~init_image\"\n    },\n    \"inputs\": {\n      \"image\": \"default.png\"\n    }\n  }\n}\n</code></pre> <p>Usage: <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a cute cat\",           # Required\n    \"width\": 1024,                     # Required\n    \"height\": 768,                     # Required\n    \"model\": \"dreamshaper_8.safetensors\",  # Optional\n    \"init_image\": \"/path/to/init.jpg\"  # Optional, auto-uploads\n})\n</code></pre></p>"},{"location":"dsl/parameters/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Outputs</li> <li>Read Best Practices</li> </ul>"},{"location":"usage/basic/","title":"Basic Usage","text":""},{"location":"usage/basic/#execute-local-workflow","title":"Execute Local Workflow","text":"<p>The most basic usage is to execute a local workflow file:</p> <pre><code>from comfykit import ComfyKit\n\n# Connect to local ComfyUI (default: http://127.0.0.1:8188)\nkit = ComfyKit()\n\n# Execute local workflow file\nresult = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a cat\",\n    \"seed\": 42,\n    \"steps\": 20\n})\n</code></pre>"},{"location":"usage/basic/#execute-remote-workflow-url","title":"Execute Remote Workflow URL","text":"<p>ComfyKit can automatically download and execute workflows from URLs:</p> <pre><code># Automatically download and execute\nresult = await kit.execute(\n    \"https://example.com/workflow.json\",\n    {\"prompt\": \"a cat\"}\n)\n</code></pre>"},{"location":"usage/basic/#execute-workflow-from-dict","title":"Execute Workflow from Dict","text":"<p>You can also pass a workflow as a Python dictionary:</p> <pre><code>workflow_dict = {\n    \"nodes\": [...],\n    \"edges\": [...]\n}\n\nresult = await kit.execute_json(workflow_dict, {\n    \"prompt\": \"a cat\"\n})\n</code></pre>"},{"location":"usage/basic/#custom-comfyui-server","title":"Custom ComfyUI Server","text":"<p>Connect to a remote ComfyUI server:</p> <pre><code>kit = ComfyKit(\n    comfyui_url=\"http://my-server:8188\",\n    api_key=\"your-api-key\"  # If authentication is required\n)\n</code></pre>"},{"location":"usage/basic/#parameters","title":"Parameters","text":"<p>Workflows can accept parameters that are defined in the workflow DSL. See Workflow DSL for more details.</p> <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a beautiful landscape\",\n    \"width\": 1024,\n    \"height\": 768,\n    \"seed\": 42,\n    \"steps\": 30\n})\n</code></pre>"},{"location":"usage/basic/#error-handling","title":"Error Handling","text":"<p>Always check the execution status:</p> <pre><code>result = await kit.execute(\"workflow.json\", params)\n\nif result.status == \"completed\":\n    print(\"Success!\")\n    print(f\"Images: {result.images}\")\nelse:\n    print(f\"Failed: {result.msg}\")\n</code></pre>"},{"location":"usage/basic/#asyncawait","title":"Async/Await","text":"<p>ComfyKit uses async/await for all operations:</p> <pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    kit = ComfyKit()\n    result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n    print(result.images)\n\n# Run the async function\nasyncio.run(main())\n</code></pre>"},{"location":"usage/basic/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Local ComfyUI setup</li> <li>Explore RunningHub Cloud execution</li> <li>Understand Result Processing</li> </ul>"},{"location":"usage/cloud/","title":"RunningHub Cloud Execution","text":"<p>Use RunningHub cloud platform to execute workflows without local GPU or ComfyUI installation.</p>"},{"location":"usage/cloud/#get-api-key","title":"Get API Key","text":"<ol> <li>Visit RunningHub</li> <li>Sign up for a free account</li> <li>Get your API key from the dashboard</li> </ol>"},{"location":"usage/cloud/#basic-usage","title":"Basic Usage","text":"<pre><code>from comfykit import ComfyKit\n\n# Initialize with RunningHub API key\nkit = ComfyKit(\n    runninghub_api_key=\"rh-key-xxx\"\n)\n\n# Execute with workflow ID\nresult = await kit.execute(\"12345\", {\n    \"prompt\": \"a beautiful landscape\"\n})\n</code></pre>"},{"location":"usage/cloud/#configuration","title":"Configuration","text":"<pre><code>kit = ComfyKit(\n    # RunningHub API URL (optional)\n    runninghub_url=\"https://www.runninghub.ai\",  # Default\n\n    # API Key (required)\n    runninghub_api_key=\"rh-key-xxx\",\n\n    # Timeout in seconds (optional)\n    runninghub_timeout=300,  # Default: 5 minutes\n\n    # Retry count (optional)\n    runninghub_retry_count=3  # Default: 3 retries\n)\n</code></pre>"},{"location":"usage/cloud/#environment-variables","title":"Environment Variables","text":"<pre><code>export RUNNINGHUB_BASE_URL=\"https://www.runninghub.ai\"\nexport RUNNINGHUB_API_KEY=\"rh-key-xxx\"\nexport RUNNINGHUB_TIMEOUT=\"300\"\nexport RUNNINGHUB_RETRY_COUNT=\"3\"\n</code></pre>"},{"location":"usage/cloud/#complete-example","title":"Complete Example","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # Initialize with RunningHub\n    kit = ComfyKit(\n        runninghub_api_key=\"rh-key-xxx\"\n    )\n\n    # Execute workflow\n    result = await kit.execute(\"12345\", {\n        \"prompt\": \"a cute cat playing with yarn\",\n        \"width\": 1024,\n        \"height\": 768,\n        \"steps\": 30\n    })\n\n    if result.status == \"completed\":\n        print(f\"\u2705 Success! Duration: {result.duration:.2f}s\")\n        print(f\"\ud83d\uddbc\ufe0f  Images: {result.images}\")\n    else:\n        print(f\"\u274c Failed: {result.msg}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"usage/cloud/#workflow-ids","title":"Workflow IDs","text":"<p>RunningHub workflows are identified by numeric IDs. You can find workflow IDs in:</p> <ul> <li>RunningHub workflow gallery</li> <li>Your personal workflow list</li> <li>Shared workflow links</li> </ul>"},{"location":"usage/cloud/#advantages","title":"Advantages","text":"<ul> <li>\u2601\ufe0f No GPU Required: Run on cloud infrastructure</li> <li>\ud83d\ude80 Fast: Optimized GPU instances</li> <li>\ud83d\udce6 Pre-configured: All models and dependencies ready</li> <li>\ud83d\udcb0 Cost-effective: Pay only for what you use</li> </ul>"},{"location":"usage/cloud/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Result Processing</li> <li>Explore complete Examples</li> </ul>"},{"location":"usage/local/","title":"Local ComfyUI","text":"<p>This guide covers how to use ComfyKit with a local ComfyUI installation.</p>"},{"location":"usage/local/#prerequisites","title":"Prerequisites","text":"<ol> <li>Have ComfyUI installed locally</li> <li>Start ComfyUI server (default port 8188)</li> </ol>"},{"location":"usage/local/#starting-comfyui","title":"Starting ComfyUI","text":"<pre><code>cd /path/to/ComfyUI\npython main.py\n</code></pre> <p>By default, ComfyUI runs on <code>http://127.0.0.1:8188</code>.</p>"},{"location":"usage/local/#basic-configuration","title":"Basic Configuration","text":"<p>ComfyKit automatically connects to local ComfyUI by default:</p> <pre><code>from comfykit import ComfyKit\n\n# Uses default URL http://127.0.0.1:8188\nkit = ComfyKit()\n</code></pre>"},{"location":"usage/local/#custom-configuration","title":"Custom Configuration","text":"<p>If your ComfyUI runs on a different port or host:</p> <pre><code>kit = ComfyKit(\n    comfyui_url=\"http://localhost:8189\"\n)\n</code></pre>"},{"location":"usage/local/#executor-types","title":"Executor Types","text":"<p>ComfyKit supports two executor types:</p>"},{"location":"usage/local/#http-executor-recommended","title":"HTTP Executor (Recommended)","text":"<pre><code>kit = ComfyKit(\n    executor_type=\"http\"  # Default\n)\n</code></pre> <p>Advantages: - More stable - Better error handling - Recommended for production</p>"},{"location":"usage/local/#websocket-executor","title":"WebSocket Executor","text":"<pre><code>kit = ComfyKit(\n    executor_type=\"websocket\"\n)\n</code></pre> <p>Advantages: - Real-time progress updates - Lower latency for long-running workflows</p>"},{"location":"usage/local/#authentication","title":"Authentication","text":"<p>If your ComfyUI server requires authentication:</p> <pre><code>kit = ComfyKit(\n    comfyui_url=\"http://my-server:8188\",\n    api_key=\"your-api-key\",\n    cookies=\"session=abc123\"\n)\n</code></pre>"},{"location":"usage/local/#environment-variables","title":"Environment Variables","text":"<p>You can also configure via environment variables:</p> <pre><code>export COMFYUI_BASE_URL=\"http://127.0.0.1:8188\"\nexport COMFYUI_EXECUTOR_TYPE=\"http\"\nexport COMFYUI_API_KEY=\"your-api-key\"\nexport COMFYUI_COOKIES=\"session=abc123\"\n</code></pre> <p>Then initialize without parameters:</p> <pre><code>kit = ComfyKit()  # Uses environment variables\n</code></pre>"},{"location":"usage/local/#complete-example","title":"Complete Example","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # Connect to local ComfyUI\n    kit = ComfyKit(\n        comfyui_url=\"http://127.0.0.1:8188\",\n        executor_type=\"http\"\n    )\n\n    # Execute workflow\n    result = await kit.execute(\n        \"workflow.json\",\n        params={\n            \"prompt\": \"a cute cat playing with yarn\",\n            \"width\": 1024,\n            \"height\": 768\n        }\n    )\n\n    # Check results\n    if result.status == \"completed\":\n        print(f\"\u2705 Success! Duration: {result.duration:.2f}s\")\n        print(f\"\ud83d\uddbc\ufe0f  Images: {result.images}\")\n\n        # Download images if needed\n        for img_url in result.images:\n            print(f\"Image URL: {img_url}\")\n    else:\n        print(f\"\u274c Failed: {result.msg}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"usage/local/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/local/#connection-refused","title":"Connection Refused","text":"<p>If you get a connection refused error:</p> <ol> <li>Make sure ComfyUI is running</li> <li>Check the port number (default is 8188)</li> <li>Verify the URL is correct</li> </ol>"},{"location":"usage/local/#timeout-errors","title":"Timeout Errors","text":"<p>For long-running workflows, you may need to increase timeout:</p> <pre><code>import httpx\n\nkit = ComfyKit(\n    comfyui_url=\"http://127.0.0.1:8188\",\n)\n# Note: Timeout configuration coming soon\n</code></pre>"},{"location":"usage/local/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about RunningHub Cloud for GPU-free execution</li> <li>Understand Result Processing</li> </ul>"},{"location":"usage/results/","title":"Result Processing","text":"<p>Understanding and processing execution results from ComfyKit.</p>"},{"location":"usage/results/#executeresult-object","title":"ExecuteResult Object","text":"<p>When you execute a workflow, ComfyKit returns an <code>ExecuteResult</code> object:</p> <pre><code>result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n</code></pre>"},{"location":"usage/results/#basic-properties","title":"Basic Properties","text":""},{"location":"usage/results/#status","title":"Status","text":"<pre><code># Check execution status\nif result.status == \"completed\":\n    print(\"Success!\")\nelif result.status == \"failed\":\n    print(f\"Failed: {result.msg}\")\n</code></pre>"},{"location":"usage/results/#duration","title":"Duration","text":"<pre><code># Execution time in seconds\nprint(f\"Execution took {result.duration:.2f} seconds\")\n</code></pre>"},{"location":"usage/results/#prompt-id","title":"Prompt ID","text":"<pre><code># Unique execution identifier\nprint(f\"Execution ID: {result.prompt_id}\")\n</code></pre>"},{"location":"usage/results/#media-outputs","title":"Media Outputs","text":""},{"location":"usage/results/#all-media-files","title":"All Media Files","text":"<pre><code># List of all image URLs\nprint(result.images)  # ['http://...', 'http://...']\n\n# List of all video URLs\nprint(result.videos)  # ['http://...']\n\n# List of all audio URLs\nprint(result.audios)  # ['http://...']\n\n# List of all text outputs\nprint(result.texts)  # ['generated text...']\n</code></pre>"},{"location":"usage/results/#grouped-by-variable","title":"Grouped by Variable","text":"<p>If your workflow uses <code>$output.name</code> markers, you can access outputs by variable name:</p> <pre><code># Get specific output by name\ncover_image = result.images_by_var[\"cover\"][0]\nthumbnail = result.images_by_var[\"thumbnail\"][0]\n\n# Get video by name\nfinal_video = result.videos_by_var[\"final\"][0]\n</code></pre>"},{"location":"usage/results/#processing-images","title":"Processing Images","text":""},{"location":"usage/results/#download-images","title":"Download Images","text":"<pre><code>import httpx\nfrom pathlib import Path\n\nasync def download_image(url: str, save_path: Path):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url)\n        save_path.write_bytes(response.content)\n\n# Download all images\nfor i, img_url in enumerate(result.images):\n    await download_image(img_url, Path(f\"output_{i}.png\"))\n</code></pre>"},{"location":"usage/results/#display-in-jupyter","title":"Display in Jupyter","text":"<pre><code>from IPython.display import Image, display\n\n# Display first image\ndisplay(Image(url=result.images[0]))\n\n# Display all images\nfor img_url in result.images:\n    display(Image(url=img_url))\n</code></pre>"},{"location":"usage/results/#use-with-pil","title":"Use with PIL","text":"<pre><code>from PIL import Image\nimport httpx\nfrom io import BytesIO\n\nasync def load_pil_image(url: str) -&gt; Image.Image:\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url)\n        return Image.open(BytesIO(response.content))\n\n# Load and process\npil_image = await load_pil_image(result.images[0])\npil_image.show()\n\n# Further processing\nresized = pil_image.resize((512, 512))\nresized.save(\"output.png\")\n</code></pre>"},{"location":"usage/results/#raw-outputs","title":"Raw Outputs","text":"<p>Access the raw output data:</p> <pre><code># Full raw output dictionary\nprint(result.outputs)\n</code></pre>"},{"location":"usage/results/#complete-example","title":"Complete Example","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\nfrom pathlib import Path\nimport httpx\n\nasync def main():\n    kit = ComfyKit()\n\n    # Execute workflow\n    result = await kit.execute(\"workflow.json\", {\n        \"prompt\": \"a beautiful sunset\"\n    })\n\n    # Check status\n    if result.status != \"completed\":\n        print(f\"Failed: {result.msg}\")\n        return\n\n    print(f\"\u2705 Success! Took {result.duration:.2f}s\")\n    print(f\"Generated {len(result.images)} images\")\n\n    # Access by variable name\n    if \"cover\" in result.images_by_var:\n        cover_url = result.images_by_var[\"cover\"][0]\n        print(f\"Cover image: {cover_url}\")\n\n    # Download all images\n    output_dir = Path(\"outputs\")\n    output_dir.mkdir(exist_ok=True)\n\n    async with httpx.AsyncClient() as client:\n        for i, img_url in enumerate(result.images):\n            response = await client.get(img_url)\n            output_path = output_dir / f\"image_{i}.png\"\n            output_path.write_bytes(response.content)\n            print(f\"Saved: {output_path}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"usage/results/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Workflow DSL for marking outputs</li> <li>Explore complete Examples</li> </ul>"},{"location":"zh/","title":"ComfyKit","text":"<p>ComfyUI - UI + Kit = ComfyKit</p> <p>\u9762\u5411\u5f00\u53d1\u8005\u7684 ComfyUI Python SDK\uff0c\u652f\u6301\u672c\u5730\u6216\u4e91\u7aef\uff0c3 \u884c\u4ee3\u7801\u751f\u6210\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891</p> <p> \ud83d\udcd6 \u5728\u7ebf\u6587\u6863 |      \ud83d\ude80 \u5feb\u901f\u5f00\u59cb |      \ud83c\udfaf DSL \u6807\u8bb0 |      \ud83d\udca1 \u793a\u4f8b\u4ee3\u7801 |      \u2753 \u95ee\u9898\u53cd\u9988 </p>"},{"location":"zh/#comfykit_1","title":"\u2728 ComfyKit \u662f\u4ec0\u4e48\uff1f","text":"<p>ComfyKit \u662f\u4e00\u4e2a\u7eaf\u7cb9\u7684 Python SDK\uff0c\u63d0\u4f9b\u7b80\u6d01\u7684 API \u6765\u6267\u884c ComfyUI workflows\uff0c\u8fd4\u56de\u7ed3\u6784\u5316\u7684 Python \u5bf9\u8c61\u3002</p>"},{"location":"zh/#3-workflow","title":"3 \u884c\u4ee3\u7801\u6267\u884c\u4e00\u4e2a workflow","text":"<pre><code>from comfykit import ComfyKit\n\n# Connect to local ComfyUI server\nkit = ComfyKit(comfyui_url=\"http://127.0.0.1:8188\")\nresult = await kit.execute(\"workflow.json\", {\"prompt\": \"a cute cat\"})\n\nprint(result.images)  # ['http://127.0.0.1:8188/view?filename=cat_001.png']\n\n# \ud83c\udf10 Or use RunningHub cloud (no local GPU needed)\n# kit = ComfyKit(runninghub_api_key=\"rh-xxx\")\n</code></pre>"},{"location":"zh/#_1","title":"\u83b7\u5f97\u7ed3\u6784\u5316\u7684\u8fd4\u56de\u6570\u636e","text":"<pre><code># ExecuteResult \u5bf9\u8c61\uff0c\u4e0d\u662f\u5b57\u7b26\u4e32\uff01\nresult.status          # \"completed\"\nresult.images          # \u6240\u6709\u751f\u6210\u7684\u56fe\u7247 URL\nresult.images_by_var   # \u6309\u53d8\u91cf\u540d\u5206\u7ec4\u7684\u56fe\u7247\nresult.videos          # \u89c6\u9891 URL\uff08\u5982\u679c\u6709\uff09\nresult.audios          # \u97f3\u9891 URL\uff08\u5982\u679c\u6709\uff09\nresult.duration        # \u6267\u884c\u8017\u65f6\n</code></pre>"},{"location":"zh/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u7279\u6027","text":"<ul> <li>\u26a1 \u96f6\u914d\u7f6e\u5f00\u7bb1\u5373\u7528\uff1a\u9ed8\u8ba4\u8fde\u63a5\u672c\u5730 ComfyUI (<code>http://127.0.0.1:8188</code>)</li> <li>\u2601\ufe0f \u4e91\u7aef\u6267\u884c\u652f\u6301\uff1a\u65e0\u7f1d\u5bf9\u63a5 RunningHub \u4e91\u5e73\u53f0 - \u65e0\u9700 GPU \u6216\u672c\u5730 ComfyUI</li> <li>\ud83c\udfa8 \u6781\u7b80 API\uff1a3 \u884c\u4ee3\u7801\u6267\u884c workflow\uff0c\u65e0\u9700\u7406\u89e3\u5185\u90e8\u5b9e\u73b0</li> <li>\ud83d\udcca \u7ed3\u6784\u5316\u8f93\u51fa\uff1a\u8fd4\u56de <code>ExecuteResult</code> \u5bf9\u8c61\uff0c\u800c\u975e\u5b57\u7b26\u4e32</li> <li>\ud83d\udd04 \u667a\u80fd\u8bc6\u522b\uff1a\u81ea\u52a8\u8bc6\u522b\u672c\u5730\u6587\u4ef6\u3001URL \u6216 RunningHub workflow ID</li> <li>\ud83d\udd0c \u8f7b\u91cf\u7ea7\uff1a\u6838\u5fc3\u4f9d\u8d56\u5c11\u4e8e 10 \u4e2a</li> <li>\ud83c\udfad \u591a\u6a21\u6001\u652f\u6301\uff1a\u56fe\u50cf\u3001\u89c6\u9891\u3001\u97f3\u9891\u4e00\u7ad9\u5f0f\u652f\u6301</li> </ul>"},{"location":"zh/#comfykit-vs-comfyui-api","title":"\ud83d\udd0d ComfyKit vs ComfyUI \u539f\u751f API","text":"\u65b9\u9762 ComfyUI \u539f\u751f API ComfyKit \u590d\u6742\u5ea6 \u9700\u8981\u624b\u52a8\u5904\u7406 WebSocket/HTTP 3 \u884c\u4ee3\u7801\u641e\u5b9a \u8fd4\u56de\u503c \u539f\u59cb JSON\uff0c\u9700\u8981\u81ea\u5df1\u89e3\u6790 \u7ed3\u6784\u5316 <code>ExecuteResult</code> \u5bf9\u8c61 \u5a92\u4f53\u5904\u7406 \u9700\u8981\u624b\u52a8\u6784\u9020 URL \u81ea\u52a8\u751f\u6210\u5b8c\u6574\u7684\u5a92\u4f53 URL \u9519\u8bef\u5904\u7406 \u9700\u8981\u81ea\u5df1\u5b9e\u73b0 \u5185\u7f6e\u5b8c\u5584\u7684\u9519\u8bef\u5904\u7406 \u9002\u5408\u4eba\u7fa4 \u719f\u6089 ComfyUI \u5185\u90e8\u673a\u5236 \u53ea\u60f3\u5feb\u901f\u96c6\u6210"},{"location":"zh/#_3","title":"\ud83d\ude4f \u81f4\u8c22","text":"<ul> <li>ComfyUI - \u5f3a\u5927\u7684 AI \u56fe\u50cf\u751f\u6210\u6846\u67b6</li> <li>RunningHub - ComfyUI \u4e91\u5e73\u53f0</li> </ul>"},{"location":"zh/#_4","title":"\ud83d\udcde \u8054\u7cfb\u65b9\u5f0f","text":"<ul> <li>\u4f5c\u8005\uff1aFan Wu</li> <li>\u90ae\u7bb1\uff1a1129090915@qq.com</li> <li>GitHub\uff1a@puke3615</li> </ul> <p>\u5982\u679c ComfyKit \u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u8bf7\u7ed9\u4e2a \u2b50 Star\uff01</p> <p> GitHub \u00b7      PyPI \u00b7      Issues </p>"},{"location":"zh/api-reference/","title":"API \u53c2\u8003","text":"<p>ComfyKit \u5b8c\u6574 API \u53c2\u8003\u3002</p>"},{"location":"zh/api-reference/#comfykit","title":"ComfyKit \u7c7b","text":""},{"location":"zh/api-reference/#_1","title":"\u6784\u9020\u51fd\u6570","text":"<pre><code>class ComfyKit:\n    def __init__(\n        self,\n        # \u672c\u5730 ComfyUI \u914d\u7f6e\n        comfyui_url: Optional[str] = None,\n        executor_type: Literal[\"http\", \"websocket\"] = \"http\",\n        api_key: Optional[str] = None,\n        cookies: Optional[str] = None,\n\n        # RunningHub \u4e91\u7aef\u914d\u7f6e\n        runninghub_url: Optional[str] = None,\n        runninghub_api_key: Optional[str] = None,\n        runninghub_timeout: int = 300,\n        runninghub_retry_count: int = 3,\n    )\n</code></pre>"},{"location":"zh/api-reference/#execute","title":"execute \u65b9\u6cd5","text":"<pre><code>async def execute(\n    self,\n    workflow: Union[str, Path],\n    params: Optional[Dict[str, Any]] = None,\n) -&gt; ExecuteResult\n</code></pre> <p>\u53c2\u6570\uff1a - <code>workflow</code>: Workflow \u6e90\uff08\u6587\u4ef6\u8def\u5f84\u3001URL \u6216 RunningHub ID\uff09 - <code>params</code>: Workflow \u53c2\u6570</p> <p>\u8fd4\u56de\uff1a - <code>ExecuteResult</code>: \u7ed3\u6784\u5316\u6267\u884c\u7ed3\u679c</p>"},{"location":"zh/api-reference/#execute_json","title":"execute_json \u65b9\u6cd5","text":"<pre><code>async def execute_json(\n    self,\n    workflow_json: Dict[str, Any],\n    params: Optional[Dict[str, Any]] = None,\n) -&gt; ExecuteResult\n</code></pre> <p>\u53c2\u6570\uff1a - <code>workflow_json</code>: Workflow JSON \u5b57\u5178 - <code>params</code>: Workflow \u53c2\u6570</p> <p>\u8fd4\u56de\uff1a - <code>ExecuteResult</code>: \u7ed3\u6784\u5316\u6267\u884c\u7ed3\u679c</p>"},{"location":"zh/api-reference/#executeresult","title":"ExecuteResult \u7c7b","text":"<pre><code>class ExecuteResult:\n    status: str                           # \"completed\" \u6216 \"failed\"\n    prompt_id: Optional[str]              # Prompt ID\n    duration: Optional[float]             # \u6267\u884c\u65f6\u95f4\uff08\u79d2\uff09\n\n    # \u5a92\u4f53\u8f93\u51fa\n    images: List[str]                     # \u6240\u6709\u56fe\u7247 URL\n    videos: List[str]                     # \u6240\u6709\u89c6\u9891 URL\n    audios: List[str]                     # \u6240\u6709\u97f3\u9891 URL\n    texts: List[str]                      # \u6240\u6709\u6587\u672c\u8f93\u51fa\n\n    # \u6309\u53d8\u91cf\u540d\u5206\u7ec4\n    images_by_var: Dict[str, List[str]]   # \u6309\u53d8\u91cf\u5206\u7ec4\u7684\u56fe\u7247\n    videos_by_var: Dict[str, List[str]]   # \u6309\u53d8\u91cf\u5206\u7ec4\u7684\u89c6\u9891\n    audios_by_var: Dict[str, List[str]]   # \u6309\u53d8\u91cf\u5206\u7ec4\u7684\u97f3\u9891\n    texts_by_var: Dict[str, List[str]]    # \u6309\u53d8\u91cf\u5206\u7ec4\u7684\u6587\u672c\n\n    # \u539f\u59cb\u8f93\u51fa\n    outputs: Optional[Dict[str, Any]]     # \u539f\u59cb\u8f93\u51fa\u6570\u636e\n    msg: Optional[str]                    # \u9519\u8bef\u6d88\u606f\uff08\u5982\u679c\u5931\u8d25\uff09\n</code></pre>"},{"location":"zh/api-reference/#_2","title":"\u4f7f\u7528\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # \u521d\u59cb\u5316\n    kit = ComfyKit()\n\n    # \u6267\u884c workflow\n    result = await kit.execute(\"workflow.json\", {\n        \"prompt\": \"a cute cat\"\n    })\n\n    # \u8bbf\u95ee\u7ed3\u679c\n    print(f\"\u72b6\u6001: {result.status}\")\n    print(f\"\u56fe\u7247: {result.images}\")\n    print(f\"\u8017\u65f6: {result.duration}\u79d2\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/api-reference/#_3","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770b\u5b8c\u6574\u793a\u4f8b</li> <li>\u4e86\u89e3\u914d\u7f6e</li> </ul>"},{"location":"zh/configuration/","title":"\u914d\u7f6e","text":"<p>ComfyKit \u914d\u7f6e\u6307\u5357\u3002</p>"},{"location":"zh/configuration/#_2","title":"\u914d\u7f6e\u4f18\u5148\u7ea7","text":"<p>ComfyKit \u4f7f\u7528\u4ee5\u4e0b\u914d\u7f6e\u4f18\u5148\u7ea7\uff1a</p> <ol> <li>\u6784\u9020\u51fd\u6570\u53c2\u6570\uff08\u6700\u9ad8\u4f18\u5148\u7ea7\uff09</li> <li>\u73af\u5883\u53d8\u91cf</li> <li>\u9ed8\u8ba4\u503c</li> </ol>"},{"location":"zh/configuration/#comfyui","title":"\u672c\u5730 ComfyUI \u914d\u7f6e","text":"<pre><code>kit = ComfyKit(\n    # ComfyUI \u670d\u52a1\u5668 URL\n    comfyui_url=\"http://127.0.0.1:8188\",  # \u9ed8\u8ba4\u503c\n\n    # \u6267\u884c\u6a21\u5f0f\uff1ahttp\uff08\u63a8\u8350\uff09\u6216 websocket\n    executor_type=\"http\",  # \u9ed8\u8ba4\u503c\n\n    # API Key\uff08\u5982\u679c ComfyUI \u9700\u8981\u8ba4\u8bc1\uff09\n    api_key=\"your-api-key\",\n\n    # Cookies\uff08\u5982\u679c\u9700\u8981\uff09\n    cookies=\"session=abc123\"\n)\n</code></pre>"},{"location":"zh/configuration/#runninghub","title":"RunningHub \u4e91\u7aef\u914d\u7f6e","text":"<pre><code>kit = ComfyKit(\n    # RunningHub API URL\n    runninghub_url=\"https://www.runninghub.ai\",  # \u9ed8\u8ba4\u503c\n\n    # RunningHub API Key\uff08\u5fc5\u9700\uff09\n    runninghub_api_key=\"rh-key-xxx\",\n\n    # \u8d85\u65f6\uff08\u79d2\uff09\n    runninghub_timeout=300,  # \u9ed8\u8ba4\uff1a5 \u5206\u949f\n\n    # \u91cd\u8bd5\u6b21\u6570\n    runninghub_retry_count=3  # \u9ed8\u8ba4\uff1a3 \u6b21\u91cd\u8bd5\n)\n</code></pre>"},{"location":"zh/configuration/#_3","title":"\u73af\u5883\u53d8\u91cf","text":"<pre><code># ComfyUI \u914d\u7f6e\nexport COMFYUI_BASE_URL=\"http://127.0.0.1:8188\"\nexport COMFYUI_EXECUTOR_TYPE=\"http\"\nexport COMFYUI_API_KEY=\"your-api-key\"\nexport COMFYUI_COOKIES=\"session=abc123\"\n\n# RunningHub \u914d\u7f6e\nexport RUNNINGHUB_BASE_URL=\"https://www.runninghub.ai\"\nexport RUNNINGHUB_API_KEY=\"rh-key-xxx\"\nexport RUNNINGHUB_TIMEOUT=\"300\"\nexport RUNNINGHUB_RETRY_COUNT=\"3\"\n</code></pre>"},{"location":"zh/configuration/#_4","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>from comfykit import ComfyKit\n\n# \u6240\u6709\u53c2\u6570\nkit = ComfyKit(\n    # \u672c\u5730 ComfyUI\n    comfyui_url=\"http://127.0.0.1:8188\",\n    executor_type=\"http\",\n    api_key=\"your-api-key\",\n    cookies=\"session=abc123\",\n\n    # RunningHub\n    runninghub_url=\"https://www.runninghub.ai\",\n    runninghub_api_key=\"rh-key-xxx\",\n    runninghub_timeout=300,\n    runninghub_retry_count=3,\n)\n</code></pre>"},{"location":"zh/configuration/#_5","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u4f7f\u7528\u65b9\u6cd5</li> <li>\u67e5\u770b API \u53c2\u8003</li> </ul>"},{"location":"zh/contributing/","title":"\u8d21\u732e","text":"<p>\u6b22\u8fce\u8d21\u732e\uff01\u8bf7\u67e5\u770b Issues \u5bfb\u627e\u9700\u8981\u5e2e\u52a9\u7684\u5730\u65b9\u3002</p>"},{"location":"zh/contributing/#_2","title":"\u8d21\u732e\u6d41\u7a0b","text":"<ol> <li>Fork \u8fd9\u4e2a\u4ed3\u5e93</li> <li>\u521b\u5efa\u7279\u6027\u5206\u652f (<code>git checkout -b feature/amazing-feature</code>)</li> <li>\u63d0\u4ea4\u4f60\u7684\u66f4\u6539 (<code>git commit -m 'Add amazing feature'</code>)</li> <li>\u63a8\u9001\u5230\u5206\u652f (<code>git push origin feature/amazing-feature</code>)</li> <li>\u5f00\u542f\u4e00\u4e2a Pull Request</li> </ol>"},{"location":"zh/contributing/#_3","title":"\u5f00\u53d1\u8bbe\u7f6e","text":"<pre><code># \u514b\u9686\u4ed3\u5e93\ngit clone https://github.com/puke3615/ComfyKit.git\ncd ComfyKit\n\n# \u5b89\u88c5\u4f9d\u8d56\nuv sync --extra dev\n\n# \u8fd0\u884c\u6d4b\u8bd5\npytest\n\n# \u683c\u5f0f\u5316\u4ee3\u7801\nruff format\nruff check --fix\n</code></pre>"},{"location":"zh/contributing/#_4","title":"\u6307\u5357","text":"<ul> <li>\u4e3a\u65b0\u529f\u80fd\u7f16\u5199\u6d4b\u8bd5</li> <li>\u9075\u5faa\u73b0\u6709\u4ee3\u7801\u98ce\u683c</li> <li>\u66f4\u65b0\u6587\u6863</li> <li>\u5982\u9700\u8981\u6dfb\u52a0\u793a\u4f8b</li> </ul>"},{"location":"zh/contributing/#_5","title":"\u95ee\u9898\uff1f","text":"<p>\u968f\u65f6\u5f00\u542f issue \u8ba8\u8bba\uff01</p>"},{"location":"zh/development/","title":"\u5f00\u53d1","text":"<p>ComfyKit \u5f00\u53d1\u6307\u5357\u3002</p>"},{"location":"zh/development/#_2","title":"\u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56","text":"<pre><code>uv sync --extra dev\n</code></pre>"},{"location":"zh/development/#_3","title":"\u8fd0\u884c\u6d4b\u8bd5","text":"<pre><code>pytest\n</code></pre>"},{"location":"zh/development/#_4","title":"\u4ee3\u7801\u683c\u5f0f\u5316","text":"<pre><code>ruff check --fix\nruff format\n</code></pre>"},{"location":"zh/development/#_5","title":"\u9879\u76ee\u7ed3\u6784","text":"<pre><code>ComfyKit/\n\u251c\u2500\u2500 comfykit/           # \u4e3b\u5305\n\u2502   \u251c\u2500\u2500 comfyui/        # ComfyUI \u96c6\u6210\n\u2502   \u2514\u2500\u2500 utils/          # \u5de5\u5177\u51fd\u6570\n\u251c\u2500\u2500 examples/           # \u793a\u4f8b\u811a\u672c\n\u251c\u2500\u2500 workflows/          # \u793a\u4f8b workflow\n\u2514\u2500\u2500 tests/              # \u6d4b\u8bd5\u5957\u4ef6\n</code></pre>"},{"location":"zh/development/#_6","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u67e5\u770b\u8d21\u732e\u6307\u5357</li> <li>\u9605\u8bfb API \u53c2\u8003</li> </ul>"},{"location":"zh/examples/","title":"\u793a\u4f8b","text":"<p><code>examples/</code> \u76ee\u5f55\u4e2d\u7684\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801\uff1a</p> <ul> <li><code>01_quick_start.py</code> - \u5feb\u901f\u5f00\u59cb\u6307\u5357</li> <li><code>02_configuration.py</code> - \u914d\u7f6e\u9009\u9879</li> <li><code>03_local_workflows.py</code> - \u672c\u5730 workflow \u6267\u884c</li> <li><code>04_runninghub_cloud.py</code> - RunningHub \u4e91\u7aef\u6267\u884c</li> <li><code>05_advanced_features.py</code> - \u9ad8\u7ea7\u7279\u6027</li> </ul>"},{"location":"zh/examples/#_2","title":"\u8fd0\u884c\u793a\u4f8b","text":"<pre><code>cd examples\npython run_all.py\n</code></pre>"},{"location":"zh/examples/#_3","title":"\u5feb\u901f\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    kit = ComfyKit()\n    result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n    print(result.images)\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/installation/","title":"\u5b89\u88c5","text":""},{"location":"zh/installation/#_2","title":"\u7cfb\u7edf\u8981\u6c42","text":"<ul> <li>Python 3.10 \u6216\u66f4\u9ad8\u7248\u672c</li> <li>pip \u6216 uv \u5305\u7ba1\u7406\u5668</li> </ul>"},{"location":"zh/installation/#pip","title":"\u4f7f\u7528 pip \u5b89\u88c5","text":"<pre><code>pip install comfykit\n</code></pre>"},{"location":"zh/installation/#uv","title":"\u4f7f\u7528 uv \u5b89\u88c5\uff08\u63a8\u8350\uff09","text":"<pre><code>uv add comfykit\n</code></pre>"},{"location":"zh/installation/#_3","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<pre><code>from comfykit import ComfyKit\n\nprint(\"ComfyKit \u5b89\u88c5\u6210\u529f\uff01\")\n</code></pre>"},{"location":"zh/installation/#_4","title":"\u53ef\u9009\u4f9d\u8d56","text":""},{"location":"zh/installation/#_5","title":"\u5f00\u53d1\u4f9d\u8d56","text":"<p>\u5982\u679c\u4f60\u60f3\u4e3a ComfyKit \u8d21\u732e\u4ee3\u7801\uff0c\u5b89\u88c5\u5f00\u53d1\u4f9d\u8d56\uff1a</p> <pre><code>pip install comfykit[dev]\n</code></pre> <p>\u6216\u4f7f\u7528 uv\uff1a</p> <pre><code>uv sync --extra dev\n</code></pre> <p>\u5305\u542b\u4ee5\u4e0b\u5de5\u5177\uff1a - pytest - \u6d4b\u8bd5\u6846\u67b6 - pytest-asyncio - \u5f02\u6b65\u6d4b\u8bd5\u652f\u6301 - black - \u4ee3\u7801\u683c\u5f0f\u5316 - ruff - \u4ee3\u7801\u68c0\u67e5</p>"},{"location":"zh/installation/#_6","title":"\u4e0b\u4e00\u6b65","text":"<p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u67e5\u770b\u5feb\u901f\u5f00\u59cb\u6307\u5357\u5f00\u59cb\u4f7f\u7528 ComfyKit\u3002</p>"},{"location":"zh/license/","title":"\u8bb8\u53ef\u8bc1","text":"<p>\u672c\u9879\u76ee\u91c7\u7528 MIT \u8bb8\u53ef\u8bc1\u3002</p>"},{"location":"zh/license/#mit","title":"MIT \u8bb8\u53ef\u8bc1","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Fan Wu\n\n\u7279\u6b64\u514d\u8d39\u6388\u4e88\u4efb\u4f55\u83b7\u5f97\u672c\u8f6f\u4ef6\u53ca\u76f8\u5173\u6587\u6863\u6587\u4ef6\uff08\"\u8f6f\u4ef6\"\uff09\u526f\u672c\u7684\u4eba\u4e0d\u53d7\u9650\u5236\u5730\u5904\u7f6e\u8be5\u8f6f\u4ef6\u7684\u6743\u5229\uff0c\n\u5305\u62ec\u4e0d\u53d7\u9650\u5236\u5730\u4f7f\u7528\u3001\u590d\u5236\u3001\u4fee\u6539\u3001\u5408\u5e76\u3001\u53d1\u5e03\u3001\u5206\u53d1\u3001\u518d\u8bb8\u53ef\u548c/\u6216\u9500\u552e\u8be5\u8f6f\u4ef6\u526f\u672c\u7684\u6743\u5229\uff0c\n\u4ee5\u53ca\u518d\u6388\u6743\u88ab\u914d\u53d1\u4e86\u672c\u8f6f\u4ef6\u7684\u4eba\u5982\u4e0a\u7684\u6743\u5229\uff0c\u987b\u5728\u4e0b\u5217\u6761\u4ef6\u4e0b\uff1a\n\n\u4e0a\u8ff0\u7248\u6743\u58f0\u660e\u548c\u672c\u8bb8\u53ef\u58f0\u660e\u5e94\u5305\u542b\u5728\u8be5\u8f6f\u4ef6\u7684\u6240\u6709\u526f\u672c\u6216\u5b9e\u8d28\u6210\u5206\u4e2d\u3002\n\n\u672c\u8f6f\u4ef6\u662f\"\u6309\u539f\u6837\"\u63d0\u4f9b\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5f62\u5f0f\u7684\u660e\u793a\u6216\u6697\u793a\u7684\u4fdd\u8bc1\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u5bf9\u9002\u9500\u6027\u3001\n\u7279\u5b9a\u7528\u9014\u7684\u9002\u7528\u6027\u548c\u4e0d\u4fb5\u6743\u7684\u4fdd\u8bc1\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u4f5c\u8005\u6216\u7248\u6743\u6301\u6709\u4eba\u90fd\u4e0d\u5bf9\u4efb\u4f55\u7d22\u8d54\u3001\n\u635f\u5bb3\u6216\u5176\u4ed6\u8d23\u4efb\u8d1f\u8d23\uff0c\u65e0\u8bba\u8fd9\u4e9b\u8ffd\u8d23\u6765\u81ea\u5408\u540c\u3001\u4fb5\u6743\u6216\u5176\u5b83\u884c\u4e3a\u4e2d\uff0c\n\u8fd8\u662f\u4ea7\u751f\u4e8e\u3001\u6e90\u4e8e\u6216\u6709\u5173\u4e8e\u672c\u8f6f\u4ef6\u4ee5\u53ca\u672c\u8f6f\u4ef6\u7684\u4f7f\u7528\u6216\u5176\u5b83\u5904\u7f6e\u3002\n</code></pre> <p>\u8be6\u89c1 LICENSE \u6587\u4ef6\u3002</p>"},{"location":"zh/quick-start/","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u4f60\u5728\u51e0\u5206\u949f\u5185\u5f00\u59cb\u4f7f\u7528 ComfyKit\u3002</p>"},{"location":"zh/quick-start/#runninghub-gpu","title":"\u65b9\u6848\u4e00\uff1aRunningHub \u4e91\u7aef\uff08\u65e0\u9700 GPU\uff09\u2b50","text":"<p>\u5982\u679c\u4f60\u6ca1\u6709\u672c\u5730 GPU \u6216 ComfyUI \u73af\u5883\uff0c\u4f7f\u7528 RunningHub \u4e91\u5e73\u53f0\uff1a</p> <pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # \u4f7f\u7528 RunningHub \u521d\u59cb\u5316\uff08\u53ea\u9700 API key\uff09\n    kit = ComfyKit(\n        runninghub_api_key=\"your-runninghub-key\"\n    )\n\n    # \u4f7f\u7528 workflow ID \u6267\u884c\n    result = await kit.execute(\"12345\", {\n        \"prompt\": \"a beautiful sunset over the ocean\"\n    })\n\n    print(f\"\ud83d\uddbc\ufe0f  \u751f\u6210\u7684\u56fe\u7247: {result.images}\")\n\nasyncio.run(main())\n</code></pre> <p>\u83b7\u53d6 API Key</p> <p>\u5728 RunningHub \u514d\u8d39\u83b7\u53d6 API key</p>"},{"location":"zh/quick-start/#comfyui","title":"\u65b9\u6848\u4e8c\uff1a\u672c\u5730 ComfyUI","text":"<p>\u5982\u679c\u4f60\u6709\u672c\u5730\u8fd0\u884c\u7684 ComfyUI\uff1a</p>"},{"location":"zh/quick-start/#1-comfyui","title":"1. \u542f\u52a8 ComfyUI","text":"<pre><code># \u542f\u52a8 ComfyUI\uff08\u9ed8\u8ba4\u7aef\u53e3 8188\uff09\npython main.py\n</code></pre>"},{"location":"zh/quick-start/#2-workflow","title":"2. \u6267\u884c workflow","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # Connect to local ComfyUI (default: http://127.0.0.1:8188)\n    kit = ComfyKit(comfyui_url=\"http://127.0.0.1:8188\")\n\n    # \u6267\u884c workflow\n    result = await kit.execute(\n        \"workflow.json\",\n        params={\"prompt\": \"a cute cat playing with yarn\"}\n    )\n\n    # \u68c0\u67e5\u7ed3\u679c\n    if result.status == \"completed\":\n        print(f\"\u2705 \u6210\u529f\uff01\u8017\u65f6: {result.duration:.2f}\u79d2\")\n        print(f\"\ud83d\uddbc\ufe0f  \u56fe\u7247: {result.images}\")\n    else:\n        print(f\"\u274c \u5931\u8d25: {result.msg}\")\n\nasyncio.run(main())\n</code></pre> <p>\ud83d\udca1 \u63d0\u793a\uff1a<code>comfyui_url</code> \u9ed8\u8ba4\u4e3a <code>http://127.0.0.1:8188</code>\uff0c\u53ef\u7701\u7565\u6b64\u53c2\u6570</p>"},{"location":"zh/quick-start/#_2","title":"\u7406\u89e3\u8fd4\u56de\u7ed3\u679c","text":"<p>\u5f53\u4f60\u6267\u884c\u4e00\u4e2a workflow \u65f6\uff0cComfyKit \u4f1a\u8fd4\u56de\u4e00\u4e2a <code>ExecuteResult</code> \u5bf9\u8c61\uff1a</p> <pre><code>result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n\n# \u57fa\u672c\u4fe1\u606f\nprint(result.status)          # \"completed\" \u6216 \"failed\"\nprint(result.duration)        # \u6267\u884c\u8017\u65f6\uff08\u79d2\uff09\nprint(result.prompt_id)       # \u552f\u4e00\u6267\u884c ID\n\n# \u751f\u6210\u7684\u5a92\u4f53\u6587\u4ef6\nprint(result.images)          # \u56fe\u7247 URL \u5217\u8868\nprint(result.videos)          # \u89c6\u9891 URL \u5217\u8868\nprint(result.audios)          # \u97f3\u9891 URL \u5217\u8868\n\n# \u6309\u53d8\u91cf\u540d\u5206\u7ec4\nprint(result.images_by_var)   # \u6309\u8f93\u51fa\u53d8\u91cf\u5206\u7ec4\u7684\u56fe\u7247\u5b57\u5178\n</code></pre>"},{"location":"zh/quick-start/#_3","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u914d\u7f6e\u9009\u9879</li> <li>\u63a2\u7d22\u4f7f\u7528\u793a\u4f8b</li> <li>\u7406\u89e3 Workflow DSL \u6765\u53c2\u6570\u5316\u4f60\u7684 workflow</li> <li>\u67e5\u770b\u5b8c\u6574\u793a\u4f8b\u4ee3\u7801</li> </ul>"},{"location":"zh/dsl/best-practices/","title":"DSL \u6700\u4f73\u5b9e\u8df5","text":"<p>\u6709\u6548\u4f7f\u7528 ComfyKit Workflow DSL \u7684\u6307\u5357\u3002</p>"},{"location":"zh/dsl/best-practices/#_1","title":"\u53c2\u6570\u547d\u540d","text":"<p>\u2705 \u597d: \u4f7f\u7528\u63cf\u8ff0\u6027\u540d\u79f0 <pre><code>\"_meta\": {\"title\": \"$positive_prompt.text!\"}\n</code></pre></p> <p>\u274c \u4e0d\u597d: \u4f7f\u7528\u5355\u5b57\u6bcd <pre><code>\"_meta\": {\"title\": \"$p.text!\"}\n</code></pre></p>"},{"location":"zh/dsl/best-practices/#_2","title":"\u5fc5\u9700\u6807\u8bb0","text":"<p>\u5bf9\u6ca1\u6709\u5408\u7406\u9ed8\u8ba4\u503c\u7684\u53c2\u6570\u4f7f\u7528 <code>!</code>\uff1a</p> <p>\u2705 \u597d: Prompt \u662f\u5fc5\u9700\u7684 <pre><code>\"_meta\": {\"title\": \"$prompt.text!\"}\n</code></pre></p> <p>\u274c \u4e0d\u597d: Seed \u901a\u5e38\u6709\u597d\u7684\u9ed8\u8ba4\u503c <pre><code>\"_meta\": {\"title\": \"$seed!\"}\n</code></pre></p>"},{"location":"zh/dsl/best-practices/#_3","title":"\u4e0a\u4f20\u6807\u8bb0","text":"<p>\u603b\u662f\u5bf9\u56fe\u7247/\u89c6\u9891/\u97f3\u9891\u53c2\u6570\u4f7f\u7528 <code>~</code>\uff1a</p> <p>\u2705 \u597d: <pre><code>\"_meta\": {\"title\": \"$~input_image\"}\n</code></pre></p>"},{"location":"zh/dsl/best-practices/#_4","title":"\u8f93\u51fa\u53d8\u91cf","text":"<p>\u5bf9\u91cd\u8981\u8f93\u51fa\u4f7f\u7528 <code>$output.xxx</code>\uff1a</p> <p>\u2705 \u597d: \u547d\u540d\u7684\u8f93\u51fa\u6613\u4e8e\u5f15\u7528 <pre><code>\"_meta\": {\"title\": \"$output.final_image\"}\n</code></pre></p>"},{"location":"zh/dsl/best-practices/#_5","title":"\u663e\u793a\u6587\u672c","text":"<p>\u6dfb\u52a0\u63cf\u8ff0\u6027\u6587\u672c\u4ee5\u63d0\u9ad8\u6e05\u6670\u5ea6\uff1a</p> <p>\u2705 \u597d: <pre><code>\"_meta\": {\"title\": \"Canvas Size, $width!, $height!\"}\n</code></pre></p> <p>\u274c \u4e0d\u597d: <pre><code>\"_meta\": {\"title\": \"$width!, $height!\"}\n</code></pre></p>"},{"location":"zh/dsl/best-practices/#_6","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>{\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"Canvas, $width!, $height!\"\n    }\n  },\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$positive_prompt.text!\"\n    }\n  },\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$~init_image\"\n    }\n  },\n  \"9\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.final\"\n    }\n  }\n}\n</code></pre>"},{"location":"zh/dsl/outputs/","title":"DSL \u8f93\u51fa","text":"<p>\u4f7f\u7528 <code>$output.name</code> \u6807\u8bb0\u6765\u6807\u8bb0 workflow \u8f93\u51fa\uff0c\u4ee5\u4fbf\u8f7b\u677e\u5f15\u7528\u751f\u6210\u7684\u5a92\u4f53\u3002</p>"},{"location":"zh/dsl/outputs/#_1","title":"\u57fa\u7840\u8f93\u51fa\u6807\u8bb0","text":"<pre><code>{\n  \"9\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.cover\"\n    },\n    \"inputs\": {\n      \"filename_prefix\": \"book_cover\",\n      \"images\": [\"8\", 0]\n    }\n  }\n}\n</code></pre> <p>\u6309\u540d\u79f0\u8bbf\u95ee\uff1a <pre><code>result = await kit.execute(\"workflow.json\", params)\ncover_image = result.images_by_var[\"cover\"][0]\n</code></pre></p>"},{"location":"zh/dsl/outputs/#_2","title":"\u591a\u4e2a\u8f93\u51fa","text":"<pre><code>{\n  \"9\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.cover\"\n    }\n  },\n  \"15\": {\n    \"class_type\": \"SaveImage\",\n    \"_meta\": {\n      \"title\": \"$output.thumbnail\"\n    }\n  }\n}\n</code></pre> <p>\u5206\u522b\u8bbf\u95ee\uff1a <pre><code>cover = result.images_by_var[\"cover\"][0]\nthumbnail = result.images_by_var[\"thumbnail\"][0]\n</code></pre></p>"},{"location":"zh/dsl/outputs/#_3","title":"\u81ea\u52a8\u68c0\u6d4b","text":"<p>\u6ca1\u6709 <code>$output</code> \u6807\u8bb0\u65f6\uff0cComfyKit \u901a\u8fc7\u8282\u70b9 ID \u81ea\u52a8\u68c0\u6d4b\u8f93\u51fa\uff1a</p> <pre><code># \u901a\u8fc7\u8282\u70b9 ID \u8bbf\u95ee\nimages_from_node_9 = result.images_by_var[\"9\"]\n</code></pre>"},{"location":"zh/dsl/outputs/#_4","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u9605\u8bfb\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"zh/dsl/overview/","title":"Workflow DSL \u6982\u89c8","text":"<p>ComfyKit \u63d0\u4f9b\u4e86\u7b80\u6d01\u7684 DSL\uff08\u9886\u57df\u7279\u5b9a\u8bed\u8a00\uff09\u6765\u6807\u8bb0 workflow \u8282\u70b9\uff0c\u5141\u8bb8\u4f60\uff1a</p> <ul> <li>\u5b9a\u4e49\u52a8\u6001\u53c2\u6570</li> <li>\u6807\u8bb0\u8f93\u51fa\u53d8\u91cf</li> <li>\u6307\u5b9a\u5fc5\u9700/\u53ef\u9009\u53c2\u6570</li> <li>\u81ea\u52a8\u5904\u7406\u5a92\u4f53\u6587\u4ef6\u4e0a\u4f20</li> </ul>"},{"location":"zh/dsl/overview/#dsl","title":"DSL \u8bed\u6cd5\u5feb\u901f\u53c2\u8003","text":"<p>\u8fd9\u4e9b DSL \u6807\u8bb0\u5199\u5728 **ComfyUI workflow \u8282\u70b9\u7684 title \u5b57\u6bb5**\u4e2d\uff0c\u7528\u4e8e\u5c06\u56fa\u5b9a\u7684 workflow \u8f6c\u6362\u4e3a\u53ef\u53c2\u6570\u5316\u7684\u6a21\u677f\u3002</p> <p>\u4f7f\u7528\u6b65\u9aa4\uff1a 1. \u5728 ComfyUI \u7f16\u8f91\u5668\u4e2d\u53cc\u51fb\u8282\u70b9\uff0c\u4fee\u6539 title \u6dfb\u52a0 DSL \u6807\u8bb0\uff08\u5982 <code>$prompt.text!</code>\uff09 2. \u4fdd\u5b58\u4e3a API \u683c\u5f0f JSON\uff08\u83dc\u5355\u9009\u62e9 \"Save (API Format)\"\uff0c\u4e0d\u662f\u666e\u901a \"Save\"\uff09 3. \u901a\u8fc7 <code>kit.execute(\"workflow.json\", {\"prompt\": \"value\"})</code> \u4f20\u53c2\u6267\u884c</p> <p>\u26a0\ufe0f \u6ce8\u610f\uff1a\u5fc5\u987b\u4f7f\u7528 API \u683c\u5f0f\u7684 workflow JSON\uff0c\u4e0d\u662f UI \u683c\u5f0f\u3002</p> \u8bed\u6cd5 \u63cf\u8ff0 \u793a\u4f8b \u6548\u679c <code>$param</code> \u57fa\u7840\u53c2\u6570\uff08\u7b80\u5199\uff09 <code>$prompt</code> \u53c2\u6570 <code>prompt</code>\uff0c\u6620\u5c04\u5230\u5b57\u6bb5 <code>prompt</code> <code>$param.field</code> \u6307\u5b9a\u5b57\u6bb5\u6620\u5c04 <code>$prompt.text</code> \u53c2\u6570 <code>prompt</code>\uff0c\u6620\u5c04\u5230\u5b57\u6bb5 <code>text</code> <code>$param!</code> \u5fc5\u9700\u53c2\u6570 <code>$prompt!</code> \u53c2\u6570 <code>prompt</code> \u662f\u5fc5\u9700\u7684\uff0c\u65e0\u9ed8\u8ba4\u503c <code>$~param</code> \u5a92\u4f53\u53c2\u6570\uff08\u4e0a\u4f20\uff09 <code>$~image</code> \u53c2\u6570 <code>image</code> \u9700\u8981\u6587\u4ef6\u4e0a\u4f20 <code>$~param!</code> \u5fc5\u9700\u5a92\u4f53\u53c2\u6570 <code>$~image!</code> \u53c2\u6570 <code>image</code> \u662f\u5fc5\u9700\u7684\u4e14\u9700\u8981\u4e0a\u4f20 <code>$param.~field!</code> \u7ec4\u5408\u6807\u8bb0 <code>$img.~image!</code> \u53c2\u6570 <code>img</code> \u6620\u5c04\u5230 <code>image</code>\uff0c\u5fc5\u9700\u4e14\u4e0a\u4f20 <code>$output.name</code> \u8f93\u51fa\u53d8\u91cf\u6807\u8bb0 <code>$output.cover</code> \u6807\u8bb0\u8f93\u51fa\u53d8\u91cf\u540d\u4e3a <code>cover</code> <code>Text, $p1, $p2</code> \u591a\u4e2a\u53c2\u6570 <code>Size, $width!, $height!</code> \u5728\u4e00\u4e2a\u8282\u70b9\u4e2d\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570"},{"location":"zh/dsl/overview/#_1","title":"\u5de5\u4f5c\u539f\u7406","text":"<p>DSL \u901a\u8fc7\u5728 workflow \u8282\u70b9\u7684 <code>_meta.title</code> \u5b57\u6bb5\u6dfb\u52a0\u6807\u8bb0\u6765\u5de5\u4f5c\uff1a</p> <pre><code>{\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$prompt.text!\"\n    },\n    \"inputs\": {\n      \"text\": \"a beautiful landscape\",\n      \"clip\": [\"4\", 1]\n    }\n  }\n}\n</code></pre> <p>\u5f53\u4f60\u6267\u884c\u8fd9\u4e2a workflow\uff1a</p> <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a cute cat\"\n})\n</code></pre> <p>ComfyKit \u4f1a\u81ea\u52a8\uff1a 1. \u89e3\u6790 DSL \u6807\u8bb0 2. \u5c06 <code>text</code> \u5b57\u6bb5\u66ff\u6362\u4e3a \"a cute cat\" 3. \u6267\u884c\u4fee\u6539\u540e\u7684 workflow</p>"},{"location":"zh/dsl/overview/#_2","title":"\u6807\u8bb0\u7c7b\u578b","text":""},{"location":"zh/dsl/overview/#_3","title":"\u53c2\u6570\u6807\u8bb0","text":"<ul> <li><code>$param</code> - \u57fa\u7840\u53c2\u6570</li> <li><code>$param.field</code> - \u5e26\u5b57\u6bb5\u6620\u5c04\u7684\u53c2\u6570</li> <li><code>$param!</code> - \u5fc5\u9700\u53c2\u6570</li> <li><code>$~param</code> - \u5a92\u4f53\u4e0a\u4f20\u53c2\u6570</li> </ul> <p>\u8be6\u89c1\u53c2\u6570\u8be6\u7ec6\u793a\u4f8b\u3002</p>"},{"location":"zh/dsl/overview/#_4","title":"\u8f93\u51fa\u6807\u8bb0","text":"<ul> <li><code>$output.name</code> - \u6807\u8bb0\u8f93\u51fa\u53d8\u91cf</li> </ul> <p>\u8be6\u89c1\u8f93\u51fa\u8be6\u7ec6\u793a\u4f8b\u3002</p>"},{"location":"zh/dsl/overview/#_5","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u8be6\u7ec6\u4e86\u89e3\u53c2\u6570</li> <li>\u7406\u89e3\u8f93\u51fa\u6807\u8bb0</li> <li>\u9605\u8bfb\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"zh/dsl/parameters/","title":"DSL \u53c2\u6570","text":"<p>ComfyKit Workflow DSL \u4e2d\u53c2\u6570\u6807\u8bb0\u7684\u8be6\u7ec6\u6307\u5357\u3002</p>"},{"location":"zh/dsl/parameters/#_1","title":"\u57fa\u7840\u53c2\u6570","text":"<p>\u6700\u7b80\u5355\u7684\u5f62\u5f0f - \u53c2\u6570\u540d\u4e0e\u5b57\u6bb5\u540d\u5339\u914d\uff1a</p> <pre><code>{\n  \"3\": {\n    \"class_type\": \"KSampler\",\n    \"_meta\": {\n      \"title\": \"$seed\"\n    },\n    \"inputs\": {\n      \"seed\": 0\n    }\n  }\n}\n</code></pre> <p>\u7528\u6cd5\uff1a <pre><code>result = await kit.execute(\"workflow.json\", {\"seed\": 42})\n</code></pre></p>"},{"location":"zh/dsl/parameters/#_2","title":"\u5b57\u6bb5\u6620\u5c04","text":"<p>\u5c06\u53c2\u6570\u6620\u5c04\u5230\u4e0d\u540c\u7684\u5b57\u6bb5\u540d\uff1a</p> <pre><code>{\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$prompt.text\"\n    },\n    \"inputs\": {\n      \"text\": \"default prompt\"\n    }\n  }\n}\n</code></pre> <p>\u7528\u6cd5\uff1a <pre><code>result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n# \"prompt\" \u53c2\u6570\u6620\u5c04\u5230 \"text\" \u5b57\u6bb5\n</code></pre></p>"},{"location":"zh/dsl/parameters/#_3","title":"\u5fc5\u9700\u53c2\u6570","text":"<p>\u4f7f\u7528 <code>!</code> \u6807\u8bb0\u5fc5\u9700\u53c2\u6570\uff1a</p> <pre><code>{\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"$width!, $height!\"\n    },\n    \"inputs\": {\n      \"width\": 512,\n      \"height\": 512\n    }\n  }\n}\n</code></pre> <p>\u7528\u6cd5\uff1a <pre><code># \u5fc5\u987b\u63d0\u4f9b width \u548c height\nresult = await kit.execute(\"workflow.json\", {\n    \"width\": 1024,\n    \"height\": 768\n})\n</code></pre></p>"},{"location":"zh/dsl/parameters/#_4","title":"\u5a92\u4f53\u4e0a\u4f20\u53c2\u6570","text":"<p>\u4f7f\u7528 <code>~</code> \u6807\u8bb0\u9700\u8981\u6587\u4ef6\u4e0a\u4f20\u7684\u53c2\u6570\uff1a</p> <pre><code>{\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$~input_image\"\n    },\n    \"inputs\": {\n      \"image\": \"default.png\"\n    }\n  }\n}\n</code></pre> <p>\u7528\u6cd5\uff1a <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"input_image\": \"/path/to/image.jpg\"  # \u81ea\u52a8\u4e0a\u4f20\n})\n</code></pre></p>"},{"location":"zh/dsl/parameters/#_5","title":"\u7ec4\u5408\u6807\u8bb0","text":"<p>\u7ec4\u5408\u5b57\u6bb5\u6620\u5c04\u3001\u4e0a\u4f20\u548c\u5fc5\u9700\u6807\u8bb0\uff1a</p> <pre><code>{\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$img.~image!\"\n    },\n    \"inputs\": {\n      \"image\": \"default.png\"\n    }\n  }\n}\n</code></pre> <p>\u542b\u4e49\uff1a - \u53c2\u6570\u540d\uff1a<code>img</code> - \u6620\u5c04\u5230\u5b57\u6bb5\uff1a<code>image</code> - \u9700\u8981\u4e0a\u4f20\uff1a<code>~</code> - \u662f\u5fc5\u9700\u7684\uff1a<code>!</code></p>"},{"location":"zh/dsl/parameters/#_6","title":"\u591a\u4e2a\u53c2\u6570","text":"<p>\u5728\u4e00\u4e2a\u8282\u70b9\u4e2d\u5b9a\u4e49\u591a\u4e2a\u53c2\u6570\uff1a</p> <pre><code>{\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"Canvas Size, $width!, $height!, $batch_size\"\n    },\n    \"inputs\": {\n      \"width\": 512,\n      \"height\": 512,\n      \"batch_size\": 1\n    }\n  }\n}\n</code></pre> <p>\u4e0d\u5e26 <code>$</code> \u7684\u6587\u672c\u4f1a\u88ab\u5ffd\u7565\uff08\u4ec5\u7528\u4e8e\u663e\u793a\uff09\u3002</p>"},{"location":"zh/dsl/parameters/#vs","title":"\u53ef\u9009 vs \u5fc5\u9700","text":""},{"location":"zh/dsl/parameters/#_7","title":"\u53ef\u9009\uff08\u6709\u9ed8\u8ba4\u503c\uff09","text":"<pre><code>\"_meta\": {\n  \"title\": \"$seed\"\n}\n</code></pre> <ul> <li>\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u4f7f\u7528 workflow \u4e2d\u7684\u9ed8\u8ba4\u503c</li> <li>\u7701\u7565\u65f6\u4e0d\u4f1a\u62a5\u9519</li> </ul>"},{"location":"zh/dsl/parameters/#_8","title":"\u5fc5\u9700\uff08\u65e0\u9ed8\u8ba4\u503c\uff09","text":"<pre><code>\"_meta\": {\n  \"title\": \"$seed!\"\n}\n</code></pre> <ul> <li>\u5fc5\u987b\u63d0\u4f9b</li> <li>\u7701\u7565\u65f6\u4f1a\u62a5\u9519</li> </ul>"},{"location":"zh/dsl/parameters/#_9","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>{\n  \"4\": {\n    \"class_type\": \"CheckpointLoaderSimple\",\n    \"_meta\": {\n      \"title\": \"$model.ckpt_name\"\n    },\n    \"inputs\": {\n      \"ckpt_name\": \"sd_xl_base_1.0.safetensors\"\n    }\n  },\n  \"5\": {\n    \"class_type\": \"EmptyLatentImage\",\n    \"_meta\": {\n      \"title\": \"Size, $width!, $height!\"\n    },\n    \"inputs\": {\n      \"width\": 1024,\n      \"height\": 1024\n    }\n  },\n  \"6\": {\n    \"class_type\": \"CLIPTextEncode\",\n    \"_meta\": {\n      \"title\": \"$prompt.text!\"\n    },\n    \"inputs\": {\n      \"text\": \"a beautiful landscape\"\n    }\n  },\n  \"10\": {\n    \"class_type\": \"LoadImage\",\n    \"_meta\": {\n      \"title\": \"$~init_image\"\n    },\n    \"inputs\": {\n      \"image\": \"default.png\"\n    }\n  }\n}\n</code></pre> <p>\u7528\u6cd5\uff1a <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a cute cat\",           # \u5fc5\u9700\n    \"width\": 1024,                     # \u5fc5\u9700\n    \"height\": 768,                     # \u5fc5\u9700\n    \"model\": \"dreamshaper_8.safetensors\",  # \u53ef\u9009\n    \"init_image\": \"/path/to/init.jpg\"  # \u53ef\u9009\uff0c\u81ea\u52a8\u4e0a\u4f20\n})\n</code></pre></p>"},{"location":"zh/dsl/parameters/#_10","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u8f93\u51fa</li> <li>\u9605\u8bfb\u6700\u4f73\u5b9e\u8df5</li> </ul>"},{"location":"zh/usage/basic/","title":"\u57fa\u7840\u7528\u6cd5","text":""},{"location":"zh/usage/basic/#workflow","title":"\u6267\u884c\u672c\u5730 Workflow","text":"<p>\u6700\u57fa\u672c\u7684\u7528\u6cd5\u662f\u6267\u884c\u672c\u5730 workflow \u6587\u4ef6\uff1a</p> <pre><code>from comfykit import ComfyKit\n\n# Connect to local ComfyUI (default: http://127.0.0.1:8188)\nkit = ComfyKit()\n\n# \u6267\u884c\u672c\u5730 workflow \u6587\u4ef6\nresult = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a cat\",\n    \"seed\": 42,\n    \"steps\": 20\n})\n</code></pre>"},{"location":"zh/usage/basic/#workflow-url","title":"\u6267\u884c\u8fdc\u7a0b Workflow URL","text":"<p>ComfyKit \u53ef\u4ee5\u81ea\u52a8\u4e0b\u8f7d\u5e76\u6267\u884c\u6765\u81ea URL \u7684 workflow\uff1a</p> <pre><code># \u81ea\u52a8\u4e0b\u8f7d\u5e76\u6267\u884c\nresult = await kit.execute(\n    \"https://example.com/workflow.json\",\n    {\"prompt\": \"a cat\"}\n)\n</code></pre>"},{"location":"zh/usage/basic/#workflow_1","title":"\u4ece\u5b57\u5178\u6267\u884c Workflow","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u5c06 workflow \u4f5c\u4e3a Python \u5b57\u5178\u4f20\u9012\uff1a</p> <pre><code>workflow_dict = {\n    \"nodes\": [...],\n    \"edges\": [...]\n}\n\nresult = await kit.execute_json(workflow_dict, {\n    \"prompt\": \"a cat\"\n})\n</code></pre>"},{"location":"zh/usage/basic/#comfyui","title":"\u81ea\u5b9a\u4e49 ComfyUI \u670d\u52a1\u5668","text":"<p>\u8fde\u63a5\u5230\u8fdc\u7a0b ComfyUI \u670d\u52a1\u5668\uff1a</p> <pre><code>kit = ComfyKit(\n    comfyui_url=\"http://my-server:8188\",\n    api_key=\"your-api-key\"  # \u5982\u679c\u9700\u8981\u8ba4\u8bc1\n)\n</code></pre>"},{"location":"zh/usage/basic/#_2","title":"\u53c2\u6570","text":"<p>Workflows \u53ef\u4ee5\u63a5\u53d7\u5728 workflow DSL \u4e2d\u5b9a\u4e49\u7684\u53c2\u6570\u3002\u8be6\u89c1 Workflow DSL\u3002</p> <pre><code>result = await kit.execute(\"workflow.json\", {\n    \"prompt\": \"a beautiful landscape\",\n    \"width\": 1024,\n    \"height\": 768,\n    \"seed\": 42,\n    \"steps\": 30\n})\n</code></pre>"},{"location":"zh/usage/basic/#_3","title":"\u9519\u8bef\u5904\u7406","text":"<p>\u59cb\u7ec8\u68c0\u67e5\u6267\u884c\u72b6\u6001\uff1a</p> <pre><code>result = await kit.execute(\"workflow.json\", params)\n\nif result.status == \"completed\":\n    print(\"\u6210\u529f\uff01\")\n    print(f\"\u56fe\u7247: {result.images}\")\nelse:\n    print(f\"\u5931\u8d25: {result.msg}\")\n</code></pre>"},{"location":"zh/usage/basic/#asyncawait","title":"Async/Await","text":"<p>ComfyKit \u7684\u6240\u6709\u64cd\u4f5c\u90fd\u4f7f\u7528 async/await\uff1a</p> <pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    kit = ComfyKit()\n    result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n    print(result.images)\n\n# \u8fd0\u884c\u5f02\u6b65\u51fd\u6570\nasyncio.run(main())\n</code></pre>"},{"location":"zh/usage/basic/#_4","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u672c\u5730 ComfyUI \u8bbe\u7f6e</li> <li>\u63a2\u7d22 RunningHub \u4e91\u7aef \u6267\u884c</li> <li>\u7406\u89e3\u7ed3\u679c\u5904\u7406</li> </ul>"},{"location":"zh/usage/cloud/","title":"RunningHub \u4e91\u7aef\u6267\u884c","text":"<p>\u4f7f\u7528 RunningHub \u4e91\u5e73\u53f0\u6267\u884c workflow\uff0c\u65e0\u9700\u672c\u5730 GPU \u6216 ComfyUI \u5b89\u88c5\u3002</p>"},{"location":"zh/usage/cloud/#api-key","title":"\u83b7\u53d6 API Key","text":"<ol> <li>\u8bbf\u95ee RunningHub</li> <li>\u6ce8\u518c\u514d\u8d39\u8d26\u53f7</li> <li>\u4ece\u63a7\u5236\u53f0\u83b7\u53d6 API key</li> </ol>"},{"location":"zh/usage/cloud/#_1","title":"\u57fa\u7840\u7528\u6cd5","text":"<pre><code>from comfykit import ComfyKit\n\n# \u4f7f\u7528 RunningHub API key \u521d\u59cb\u5316\nkit = ComfyKit(\n    runninghub_api_key=\"rh-key-xxx\"\n)\n\n# \u4f7f\u7528 workflow ID \u6267\u884c\nresult = await kit.execute(\"12345\", {\n    \"prompt\": \"a beautiful landscape\"\n})\n</code></pre>"},{"location":"zh/usage/cloud/#_2","title":"\u914d\u7f6e\u9009\u9879","text":"<pre><code>kit = ComfyKit(\n    # RunningHub API URL\uff08\u53ef\u9009\uff09\n    runninghub_url=\"https://www.runninghub.ai\",  # \u9ed8\u8ba4\u503c\n\n    # API Key\uff08\u5fc5\u9700\uff09\n    runninghub_api_key=\"rh-key-xxx\",\n\n    # \u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\uff08\u53ef\u9009\uff09\n    runninghub_timeout=300,  # \u9ed8\u8ba4: 5 \u5206\u949f\n\n    # \u91cd\u8bd5\u6b21\u6570\uff08\u53ef\u9009\uff09\n    runninghub_retry_count=3  # \u9ed8\u8ba4: 3 \u6b21\u91cd\u8bd5\n)\n</code></pre>"},{"location":"zh/usage/cloud/#_3","title":"\u73af\u5883\u53d8\u91cf","text":"<pre><code>export RUNNINGHUB_BASE_URL=\"https://www.runninghub.ai\"\nexport RUNNINGHUB_API_KEY=\"rh-key-xxx\"\nexport RUNNINGHUB_TIMEOUT=\"300\"\nexport RUNNINGHUB_RETRY_COUNT=\"3\"\n</code></pre>"},{"location":"zh/usage/cloud/#_4","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # \u4f7f\u7528 RunningHub \u521d\u59cb\u5316\n    kit = ComfyKit(\n        runninghub_api_key=\"rh-key-xxx\"\n    )\n\n    # \u6267\u884c workflow\n    result = await kit.execute(\"12345\", {\n        \"prompt\": \"a cute cat playing with yarn\",\n        \"width\": 1024,\n        \"height\": 768,\n        \"steps\": 30\n    })\n\n    if result.status == \"completed\":\n        print(f\"\u2705 \u6210\u529f\uff01\u8017\u65f6: {result.duration:.2f}\u79d2\")\n        print(f\"\ud83d\uddbc\ufe0f  \u56fe\u7247: {result.images}\")\n    else:\n        print(f\"\u274c \u5931\u8d25: {result.msg}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/usage/cloud/#workflow-id","title":"Workflow ID","text":"<p>RunningHub workflow \u901a\u8fc7\u6570\u5b57 ID \u6807\u8bc6\u3002\u4f60\u53ef\u4ee5\u5728\u4ee5\u4e0b\u4f4d\u7f6e\u627e\u5230 workflow ID\uff1a</p> <ul> <li>RunningHub workflow \u753b\u5eca</li> <li>\u4f60\u7684\u4e2a\u4eba workflow \u5217\u8868</li> <li>\u5206\u4eab\u7684 workflow \u94fe\u63a5</li> </ul>"},{"location":"zh/usage/cloud/#_5","title":"\u4f18\u52bf","text":"<ul> <li>\u2601\ufe0f \u65e0\u9700 GPU\uff1a\u5728\u4e91\u57fa\u7840\u8bbe\u65bd\u4e0a\u8fd0\u884c</li> <li>\ud83d\ude80 \u5feb\u901f\uff1a\u4f18\u5316\u7684 GPU \u5b9e\u4f8b</li> <li>\ud83d\udce6 \u9884\u914d\u7f6e\uff1a\u6240\u6709\u6a21\u578b\u548c\u4f9d\u8d56\u5df2\u5c31\u7eea</li> <li>\ud83d\udcb0 \u6210\u672c\u6548\u76ca\uff1a\u6309\u4f7f\u7528\u91cf\u4ed8\u8d39</li> </ul>"},{"location":"zh/usage/cloud/#_6","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3\u7ed3\u679c\u5904\u7406</li> <li>\u63a2\u7d22\u5b8c\u6574\u793a\u4f8b</li> </ul>"},{"location":"zh/usage/local/","title":"\u672c\u5730 ComfyUI","text":"<p>\u672c\u6307\u5357\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 ComfyKit \u8fde\u63a5\u672c\u5730 ComfyUI\u3002</p>"},{"location":"zh/usage/local/#_1","title":"\u524d\u7f6e\u6761\u4ef6","text":"<ol> <li>\u5df2\u5b89\u88c5 ComfyUI</li> <li>\u542f\u52a8 ComfyUI \u670d\u52a1\u5668\uff08\u9ed8\u8ba4\u7aef\u53e3 8188\uff09</li> </ol>"},{"location":"zh/usage/local/#comfyui_1","title":"\u542f\u52a8 ComfyUI","text":"<pre><code>cd /path/to/ComfyUI\npython main.py\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cComfyUI \u8fd0\u884c\u5728 <code>http://127.0.0.1:8188</code>\u3002</p>"},{"location":"zh/usage/local/#_2","title":"\u57fa\u7840\u914d\u7f6e","text":"<p>ComfyKit \u9ed8\u8ba4\u81ea\u52a8\u8fde\u63a5\u672c\u5730 ComfyUI\uff1a</p> <pre><code>from comfykit import ComfyKit\n\n# \u4f7f\u7528\u9ed8\u8ba4 URL http://127.0.0.1:8188\nkit = ComfyKit()\n</code></pre>"},{"location":"zh/usage/local/#_3","title":"\u81ea\u5b9a\u4e49\u914d\u7f6e","text":"<p>\u5982\u679c\u4f60\u7684 ComfyUI \u8fd0\u884c\u5728\u4e0d\u540c\u7684\u7aef\u53e3\u6216\u4e3b\u673a\uff1a</p> <pre><code>kit = ComfyKit(\n    comfyui_url=\"http://localhost:8189\"\n)\n</code></pre>"},{"location":"zh/usage/local/#_4","title":"\u6267\u884c\u5668\u7c7b\u578b","text":"<p>ComfyKit \u652f\u6301\u4e24\u79cd\u6267\u884c\u5668\u7c7b\u578b\uff1a</p>"},{"location":"zh/usage/local/#http","title":"HTTP \u6267\u884c\u5668\uff08\u63a8\u8350\uff09","text":"<pre><code>kit = ComfyKit(\n    executor_type=\"http\"  # \u9ed8\u8ba4\n)\n</code></pre> <p>\u4f18\u70b9\uff1a - \u66f4\u7a33\u5b9a - \u66f4\u597d\u7684\u9519\u8bef\u5904\u7406 - \u751f\u4ea7\u73af\u5883\u63a8\u8350</p>"},{"location":"zh/usage/local/#websocket","title":"WebSocket \u6267\u884c\u5668","text":"<pre><code>kit = ComfyKit(\n    executor_type=\"websocket\"\n)\n</code></pre> <p>\u4f18\u70b9\uff1a - \u5b9e\u65f6\u8fdb\u5ea6\u66f4\u65b0 - \u957f\u65f6\u95f4\u8fd0\u884c\u7684 workflow \u5ef6\u8fdf\u66f4\u4f4e</p>"},{"location":"zh/usage/local/#_5","title":"\u8ba4\u8bc1","text":"<p>\u5982\u679c\u4f60\u7684 ComfyUI \u670d\u52a1\u5668\u9700\u8981\u8ba4\u8bc1\uff1a</p> <pre><code>kit = ComfyKit(\n    comfyui_url=\"http://my-server:8188\",\n    api_key=\"your-api-key\",\n    cookies=\"session=abc123\"\n)\n</code></pre>"},{"location":"zh/usage/local/#_6","title":"\u73af\u5883\u53d8\u91cf","text":"<p>\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u73af\u5883\u53d8\u91cf\u914d\u7f6e\uff1a</p> <pre><code>export COMFYUI_BASE_URL=\"http://127.0.0.1:8188\"\nexport COMFYUI_EXECUTOR_TYPE=\"http\"\nexport COMFYUI_API_KEY=\"your-api-key\"\nexport COMFYUI_COOKIES=\"session=abc123\"\n</code></pre> <p>\u7136\u540e\u65e0\u53c2\u6570\u521d\u59cb\u5316\uff1a</p> <pre><code>kit = ComfyKit()  # \u4f7f\u7528\u73af\u5883\u53d8\u91cf\n</code></pre>"},{"location":"zh/usage/local/#_7","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\n\nasync def main():\n    # \u8fde\u63a5\u672c\u5730 ComfyUI\n    kit = ComfyKit(\n        comfyui_url=\"http://127.0.0.1:8188\",\n        executor_type=\"http\"\n    )\n\n    # \u6267\u884c workflow\n    result = await kit.execute(\n        \"workflow.json\",\n        params={\n            \"prompt\": \"a cute cat playing with yarn\",\n            \"width\": 1024,\n            \"height\": 768\n        }\n    )\n\n    # \u68c0\u67e5\u7ed3\u679c\n    if result.status == \"completed\":\n        print(f\"\u2705 \u6210\u529f\uff01\u8017\u65f6: {result.duration:.2f}\u79d2\")\n        print(f\"\ud83d\uddbc\ufe0f  \u56fe\u7247: {result.images}\")\n\n        # \u5982\u9700\u8981\u53ef\u4ee5\u4e0b\u8f7d\u56fe\u7247\n        for img_url in result.images:\n            print(f\"\u56fe\u7247 URL: {img_url}\")\n    else:\n        print(f\"\u274c \u5931\u8d25: {result.msg}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/usage/local/#_8","title":"\u6545\u969c\u6392\u67e5","text":""},{"location":"zh/usage/local/#_9","title":"\u8fde\u63a5\u88ab\u62d2\u7edd","text":"<p>\u5982\u679c\u9047\u5230\u8fde\u63a5\u88ab\u62d2\u7edd\u9519\u8bef\uff1a</p> <ol> <li>\u786e\u4fdd ComfyUI \u6b63\u5728\u8fd0\u884c</li> <li>\u68c0\u67e5\u7aef\u53e3\u53f7\uff08\u9ed8\u8ba4\u662f 8188\uff09</li> <li>\u9a8c\u8bc1 URL \u662f\u5426\u6b63\u786e</li> </ol>"},{"location":"zh/usage/local/#_10","title":"\u8d85\u65f6\u9519\u8bef","text":"<p>\u5bf9\u4e8e\u957f\u65f6\u95f4\u8fd0\u884c\u7684 workflow\uff0c\u53ef\u80fd\u9700\u8981\u589e\u52a0\u8d85\u65f6\u65f6\u95f4\uff1a</p> <pre><code>import httpx\n\nkit = ComfyKit(\n    comfyui_url=\"http://127.0.0.1:8188\",\n)\n# \u6ce8\u610f\uff1a\u8d85\u65f6\u914d\u7f6e\u5373\u5c06\u63a8\u51fa\n</code></pre>"},{"location":"zh/usage/local/#_11","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3 RunningHub \u4e91\u7aef \u65e0\u9700 GPU \u6267\u884c</li> <li>\u7406\u89e3\u7ed3\u679c\u5904\u7406</li> </ul>"},{"location":"zh/usage/results/","title":"\u7ed3\u679c\u5904\u7406","text":"<p>\u7406\u89e3\u548c\u5904\u7406 ComfyKit \u7684\u6267\u884c\u7ed3\u679c\u3002</p>"},{"location":"zh/usage/results/#executeresult","title":"ExecuteResult \u5bf9\u8c61","text":"<p>\u5f53\u4f60\u6267\u884c workflow \u65f6\uff0cComfyKit \u8fd4\u56de\u4e00\u4e2a <code>ExecuteResult</code> \u5bf9\u8c61\uff1a</p> <pre><code>result = await kit.execute(\"workflow.json\", {\"prompt\": \"a cat\"})\n</code></pre>"},{"location":"zh/usage/results/#_2","title":"\u57fa\u672c\u5c5e\u6027","text":""},{"location":"zh/usage/results/#_3","title":"\u72b6\u6001","text":"<pre><code># \u68c0\u67e5\u6267\u884c\u72b6\u6001\nif result.status == \"completed\":\n    print(\"\u6210\u529f\uff01\")\nelif result.status == \"failed\":\n    print(f\"\u5931\u8d25: {result.msg}\")\n</code></pre>"},{"location":"zh/usage/results/#_4","title":"\u8017\u65f6","text":"<pre><code># \u6267\u884c\u65f6\u95f4\uff08\u79d2\uff09\nprint(f\"\u6267\u884c\u8017\u65f6 {result.duration:.2f} \u79d2\")\n</code></pre>"},{"location":"zh/usage/results/#prompt-id","title":"Prompt ID","text":"<pre><code># \u552f\u4e00\u6267\u884c\u6807\u8bc6\u7b26\nprint(f\"\u6267\u884c ID: {result.prompt_id}\")\n</code></pre>"},{"location":"zh/usage/results/#_5","title":"\u5a92\u4f53\u8f93\u51fa","text":""},{"location":"zh/usage/results/#_6","title":"\u6240\u6709\u5a92\u4f53\u6587\u4ef6","text":"<pre><code># \u6240\u6709\u56fe\u7247 URL \u5217\u8868\nprint(result.images)  # ['http://...', 'http://...']\n\n# \u6240\u6709\u89c6\u9891 URL \u5217\u8868\nprint(result.videos)  # ['http://...']\n\n# \u6240\u6709\u97f3\u9891 URL \u5217\u8868\nprint(result.audios)  # ['http://...']\n\n# \u6240\u6709\u6587\u672c\u8f93\u51fa\u5217\u8868\nprint(result.texts)  # ['generated text...']\n</code></pre>"},{"location":"zh/usage/results/#_7","title":"\u6309\u53d8\u91cf\u540d\u5206\u7ec4","text":"<p>\u5982\u679c\u4f60\u7684 workflow \u4f7f\u7528\u4e86 <code>$output.name</code> \u6807\u8bb0\uff0c\u53ef\u4ee5\u901a\u8fc7\u53d8\u91cf\u540d\u8bbf\u95ee\u8f93\u51fa\uff1a</p> <pre><code># \u901a\u8fc7\u540d\u79f0\u83b7\u53d6\u7279\u5b9a\u8f93\u51fa\ncover_image = result.images_by_var[\"cover\"][0]\nthumbnail = result.images_by_var[\"thumbnail\"][0]\n\n# \u901a\u8fc7\u540d\u79f0\u83b7\u53d6\u89c6\u9891\nfinal_video = result.videos_by_var[\"final\"][0]\n</code></pre>"},{"location":"zh/usage/results/#_8","title":"\u5904\u7406\u56fe\u7247","text":""},{"location":"zh/usage/results/#_9","title":"\u4e0b\u8f7d\u56fe\u7247","text":"<pre><code>import httpx\nfrom pathlib import Path\n\nasync def download_image(url: str, save_path: Path):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url)\n        save_path.write_bytes(response.content)\n\n# \u4e0b\u8f7d\u6240\u6709\u56fe\u7247\nfor i, img_url in enumerate(result.images):\n    await download_image(img_url, Path(f\"output_{i}.png\"))\n</code></pre>"},{"location":"zh/usage/results/#jupyter","title":"\u5728 Jupyter \u4e2d\u663e\u793a","text":"<pre><code>from IPython.display import Image, display\n\n# \u663e\u793a\u7b2c\u4e00\u5f20\u56fe\u7247\ndisplay(Image(url=result.images[0]))\n\n# \u663e\u793a\u6240\u6709\u56fe\u7247\nfor img_url in result.images:\n    display(Image(url=img_url))\n</code></pre>"},{"location":"zh/usage/results/#pil","title":"\u4f7f\u7528 PIL","text":"<pre><code>from PIL import Image\nimport httpx\nfrom io import BytesIO\n\nasync def load_pil_image(url: str) -&gt; Image.Image:\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url)\n        return Image.open(BytesIO(response.content))\n\n# \u52a0\u8f7d\u548c\u5904\u7406\npil_image = await load_pil_image(result.images[0])\npil_image.show()\n\n# \u8fdb\u4e00\u6b65\u5904\u7406\nresized = pil_image.resize((512, 512))\nresized.save(\"output.png\")\n</code></pre>"},{"location":"zh/usage/results/#_10","title":"\u539f\u59cb\u8f93\u51fa","text":"<p>\u8bbf\u95ee\u539f\u59cb\u8f93\u51fa\u6570\u636e\uff1a</p> <pre><code># \u5b8c\u6574\u7684\u539f\u59cb\u8f93\u51fa\u5b57\u5178\nprint(result.outputs)\n</code></pre>"},{"location":"zh/usage/results/#_11","title":"\u5b8c\u6574\u793a\u4f8b","text":"<pre><code>import asyncio\nfrom comfykit import ComfyKit\nfrom pathlib import Path\nimport httpx\n\nasync def main():\n    kit = ComfyKit()\n\n    # \u6267\u884c workflow\n    result = await kit.execute(\"workflow.json\", {\n        \"prompt\": \"a beautiful sunset\"\n    })\n\n    # \u68c0\u67e5\u72b6\u6001\n    if result.status != \"completed\":\n        print(f\"\u5931\u8d25: {result.msg}\")\n        return\n\n    print(f\"\u2705 \u6210\u529f\uff01\u8017\u65f6 {result.duration:.2f}\u79d2\")\n    print(f\"\u751f\u6210\u4e86 {len(result.images)} \u5f20\u56fe\u7247\")\n\n    # \u901a\u8fc7\u53d8\u91cf\u540d\u8bbf\u95ee\n    if \"cover\" in result.images_by_var:\n        cover_url = result.images_by_var[\"cover\"][0]\n        print(f\"\u5c01\u9762\u56fe\u7247: {cover_url}\")\n\n    # \u4e0b\u8f7d\u6240\u6709\u56fe\u7247\n    output_dir = Path(\"outputs\")\n    output_dir.mkdir(exist_ok=True)\n\n    async with httpx.AsyncClient() as client:\n        for i, img_url in enumerate(result.images):\n            response = await client.get(img_url)\n            output_path = output_dir / f\"image_{i}.png\"\n            output_path.write_bytes(response.content)\n            print(f\"\u5df2\u4fdd\u5b58: {output_path}\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"zh/usage/results/#_12","title":"\u4e0b\u4e00\u6b65","text":"<ul> <li>\u4e86\u89e3 Workflow DSL \u6807\u8bb0\u8f93\u51fa</li> <li>\u63a2\u7d22\u5b8c\u6574\u793a\u4f8b</li> </ul>"}]}